/* tslint:disable */
/* eslint-disable */
/**
 * OpenStreetMap Nominatim API
 * Nominatim (from the Latin, \'by name\') is a tool to search OSM data by name and address and to generate synthetic addresses of OSM points (reverse geocoding). It has also limited capability to search features by their type (pubs, hotels, churches, etc).  Need some help? [nominatim.org](https://nominatim.org/)
 *
 * The version of the OpenAPI document: 4.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface DetailsResponse
 */
export interface DetailsResponse {
    /**
     * 
     * @type {number}
     * @memberof DetailsResponse
     */
    'place_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof DetailsResponse
     */
    'parent_place_id'?: number;
    /**
     * 
     * @type {OSMType}
     * @memberof DetailsResponse
     */
    'osm_type'?: OSMType;
    /**
     * 
     * @type {number}
     * @memberof DetailsResponse
     */
    'osm_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof DetailsResponse
     */
    'category'?: string;
    /**
     * 
     * @type {string}
     * @memberof DetailsResponse
     */
    'type'?: string;
    /**
     * 
     * @type {number}
     * @memberof DetailsResponse
     */
    'admin_level'?: number;
    /**
     * 
     * @type {string}
     * @memberof DetailsResponse
     */
    'localname'?: string;
    /**
     * 
     * @type {DetailsResponseNames}
     * @memberof DetailsResponse
     */
    'names'?: DetailsResponseNames;
    /**
     * 
     * @type {object}
     * @memberof DetailsResponse
     */
    'addresstags'?: object;
    /**
     * 
     * @type {string}
     * @memberof DetailsResponse
     */
    'calculated_postcode'?: string;
    /**
     * 
     * @type {string}
     * @memberof DetailsResponse
     */
    'country_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof DetailsResponse
     */
    'indexed_date'?: string;
    /**
     * 
     * @type {number}
     * @memberof DetailsResponse
     */
    'importance'?: number;
    /**
     * 
     * @type {number}
     * @memberof DetailsResponse
     */
    'calculated_importance'?: number;
    /**
     * 
     * @type {object}
     * @memberof DetailsResponse
     */
    'extratags'?: object;
    /**
     * 
     * @type {number}
     * @memberof DetailsResponse
     */
    'rank_address'?: number;
    /**
     * 
     * @type {number}
     * @memberof DetailsResponse
     */
    'rank_search'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof DetailsResponse
     */
    'isarea'?: boolean;
    /**
     * 
     * @type {GeoJSONPoint}
     * @memberof DetailsResponse
     */
    'centroid'?: GeoJSONPoint;
    /**
     * 
     * @type {}
     * @memberof DetailsResponse
     */
    'geometry'?:  | null;
    /**
     * 
     * @type {Array<DetailsResponseAddressInner>}
     * @memberof DetailsResponse
     */
    'address'?: Array<DetailsResponseAddressInner>;
}


/**
 * 
 * @export
 * @interface DetailsResponseAddressInner
 */
export interface DetailsResponseAddressInner {
    /**
     * 
     * @type {string}
     * @memberof DetailsResponseAddressInner
     */
    'localname'?: string;
    /**
     * 
     * @type {number}
     * @memberof DetailsResponseAddressInner
     */
    'place_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof DetailsResponseAddressInner
     */
    'osm_id'?: number;
    /**
     * 
     * @type {OSMType}
     * @memberof DetailsResponseAddressInner
     */
    'osm_type'?: OSMType;
    /**
     * 
     * @type {string}
     * @memberof DetailsResponseAddressInner
     */
    'class'?: string;
    /**
     * 
     * @type {string}
     * @memberof DetailsResponseAddressInner
     */
    'type'?: string;
    /**
     * 
     * @type {number}
     * @memberof DetailsResponseAddressInner
     */
    'admin_level'?: number;
    /**
     * 
     * @type {number}
     * @memberof DetailsResponseAddressInner
     */
    'rank_address'?: number;
    /**
     * 
     * @type {number}
     * @memberof DetailsResponseAddressInner
     */
    'distance'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof DetailsResponseAddressInner
     */
    'isaddress'?: boolean;
}


/**
 * 
 * @export
 * @interface DetailsResponseNames
 */
export interface DetailsResponseNames {
    /**
     * 
     * @type {string}
     * @memberof DetailsResponseNames
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {number}
     * @memberof ErrorResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface GeoJSONPoint
 */
export interface GeoJSONPoint {
    /**
     * 
     * @type {string}
     * @memberof GeoJSONPoint
     */
    'type': GeoJSONPointTypeEnum;
    /**
     * 
     * @type {Array<number>}
     * @memberof GeoJSONPoint
     */
    'coordinates': Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof GeoJSONPoint
     */
    'bbox'?: Array<number>;
}

export const GeoJSONPointTypeEnum = {
    Point: 'Point'
} as const;

export type GeoJSONPointTypeEnum = typeof GeoJSONPointTypeEnum[keyof typeof GeoJSONPointTypeEnum];

/**
 * 
 * @export
 * @interface OSMGeocodeJson
 */
export interface OSMGeocodeJson {
    /**
     * 
     * @type {any}
     * @memberof OSMGeocodeJson
     */
    'type'?: any;
    /**
     * REQUIRED. Namespace.
     * @type {object}
     * @memberof OSMGeocodeJson
     */
    'geocoding': object;
    /**
     * 
     * @type {Array<OSMGeocodeJsonAllOfFeaturesInner>}
     * @memberof OSMGeocodeJson
     */
    'features'?: Array<OSMGeocodeJsonAllOfFeaturesInner>;
}
/**
 * 
 * @export
 * @interface OSMGeocodeJsonAllOfFeaturesInner
 */
export interface OSMGeocodeJsonAllOfFeaturesInner {
    /**
     * 
     * @type {OSMGeocodeJsonAllOfFeaturesInnerProperties}
     * @memberof OSMGeocodeJsonAllOfFeaturesInner
     */
    'properties'?: OSMGeocodeJsonAllOfFeaturesInnerProperties;
}
/**
 * 
 * @export
 * @interface OSMGeocodeJsonAllOfFeaturesInnerProperties
 */
export interface OSMGeocodeJsonAllOfFeaturesInnerProperties {
    /**
     * 
     * @type {OSMGeocodeJsonAllOfFeaturesInnerPropertiesGeocoding}
     * @memberof OSMGeocodeJsonAllOfFeaturesInnerProperties
     */
    'geocoding'?: OSMGeocodeJsonAllOfFeaturesInnerPropertiesGeocoding;
}
/**
 * 
 * @export
 * @interface OSMGeocodeJsonAllOfFeaturesInnerPropertiesGeocoding
 */
export interface OSMGeocodeJsonAllOfFeaturesInnerPropertiesGeocoding {
    /**
     * 
     * @type {string}
     * @memberof OSMGeocodeJsonAllOfFeaturesInnerPropertiesGeocoding
     */
    'osm_type'?: string;
    /**
     * 
     * @type {number}
     * @memberof OSMGeocodeJsonAllOfFeaturesInnerPropertiesGeocoding
     */
    'osm_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof OSMGeocodeJsonAllOfFeaturesInnerPropertiesGeocoding
     */
    'osm_key'?: string;
    /**
     * 
     * @type {string}
     * @memberof OSMGeocodeJsonAllOfFeaturesInnerPropertiesGeocoding
     */
    'osm_value'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const OSMType = {
    N: 'N',
    W: 'W',
    R: 'R'
} as const;

export type OSMType = typeof OSMType[keyof typeof OSMType];


/**
 * 
 * @export
 * @interface StatusResponse
 */
export interface StatusResponse {
    /**
     * 
     * @type {number}
     * @memberof StatusResponse
     */
    'status': number;
    /**
     * 
     * @type {string}
     * @memberof StatusResponse
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof StatusResponse
     */
    'data_updated'?: string;
    /**
     * A semver.org compliant version number (see https://semver.org).
     * @type {string}
     * @memberof StatusResponse
     */
    'software_version'?: string;
    /**
     * A semver.org compliant version number (see https://semver.org).
     * @type {string}
     * @memberof StatusResponse
     */
    'database_version'?: string;
}

/**
 * DebugApi - axios parameter creator
 * @export
 */
export const DebugApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Redirect to https://nominatim.openstreetmap.org/ui/deletable.html.
         * @summary List objects that have been deleted in OSM but are held back in Nominatim in case the deletion was accidental
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletable: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/deletable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API endpoint is meant for visual inspection of the data in the database, mainly together with [Nominatim UI](https://github.com/osm-search/nominatim-ui/). The parameters of the endpoint and the output may change occasionally between versions of Nominatim. Do not rely on the output in scripts or applications.
         * @summary Show all details about a single place saved in the database
         * @param {OSMType} osmtype The type is required and it is one of node (N), way (W) or relation (R).
         * @param {number} osmid The id is required and it must be a number.
         * @param {string} [_class] The class parameter is optional and allows to distinguish between entries, when the corresponding OSM object has more than one main tag. For example, when a place is tagged with tourism&#x3D;hotel and amenity&#x3D;restaurant, there will be two place entries in Nominatim, one for a restaurant, one for a hotel. You need to specify class&#x3D;tourism or class&#x3D;amentity to get exactly the one you want. If there are multiple places in the database but the class parameter is left out, then one of the places will be chosen at random and displayed.
         * @param {number} [placeId] Place IDs are assigned sequentially during Nominatim data import. The ID for a place is different between Nominatim installation (servers) and changes when data gets reimported. Therefore it cannot be used as a permanent id and shouldn\&#39;t be used in bug reports.
         * @param {DetailsFormatEnum} [format] Format of response. See [Place Output Formats](https://nominatim.org/release-docs/develop/api/Output/) for details on each format. If not specified, it is equal to &#x60;json&#x60;.
         * @param {string} [jsonCallback] Wrap JSON output in a callback function (JSONP) i.e. &lt;string&gt;(&lt;json&gt;). Only has an effect for JSON output formats.
         * @param {number} [addressdetails] Include a breakdown of the address into elements. If not specified, it is equal to &#x60;0&#x60;.
         * @param {number} [keywords] Include a list of name keywords and address keywords in the result. If not specified, it is equal to &#x60;0&#x60;.
         * @param {number} [linkedplaces] Include details of places that are linked with this one. Places get linked together when they are different forms of the same physical object. Nominatim links two kinds of objects together: place nodes get linked with the corresponding administrative boundaries. Waterway relations get linked together with their members. If not specified, it is equal to &#x60;1&#x60;.
         * @param {number} [hierarchy] Include details of places lower in the address hierarchy. If not specified, it is equal to &#x60;0&#x60;.
         * @param {number} [groupHierarchy] The output of the address hierarchy will be grouped by type. If not specified, it is equal to &#x60;0&#x60;.
         * @param {number} [polygonGeojson] Include geometry of result as a GeoJSON. If not specified, it is equal to &#x60;0&#x60;.
         * @param {string} [acceptLanguage] Preferred language order for showing search results. This may either be a simple comma-separated list of language codes or have the same format as the [Accept-Language HTTP header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language). If not specified, it is equal to the content of Accept-Language HTTP header (browsers send the currently chosen browser language, command-line tools usually don\&#39;t send any Accept-Language header).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        details: async (osmtype: OSMType, osmid: number, _class?: string, placeId?: number, format?: DetailsFormatEnum, jsonCallback?: string, addressdetails?: number, keywords?: number, linkedplaces?: number, hierarchy?: number, groupHierarchy?: number, polygonGeojson?: number, acceptLanguage?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'osmtype' is not null or undefined
            assertParamExists('details', 'osmtype', osmtype)
            // verify required parameter 'osmid' is not null or undefined
            assertParamExists('details', 'osmid', osmid)
            const localVarPath = `/details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (osmtype !== undefined) {
                localVarQueryParameter['osmtype'] = osmtype;
            }

            if (osmid !== undefined) {
                localVarQueryParameter['osmid'] = osmid;
            }

            if (_class !== undefined) {
                localVarQueryParameter['class'] = _class;
            }

            if (placeId !== undefined) {
                localVarQueryParameter['place_id'] = placeId;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (jsonCallback !== undefined) {
                localVarQueryParameter['json_callback'] = jsonCallback;
            }

            if (addressdetails !== undefined) {
                localVarQueryParameter['addressdetails'] = addressdetails;
            }

            if (keywords !== undefined) {
                localVarQueryParameter['keywords'] = keywords;
            }

            if (linkedplaces !== undefined) {
                localVarQueryParameter['linkedplaces'] = linkedplaces;
            }

            if (hierarchy !== undefined) {
                localVarQueryParameter['hierarchy'] = hierarchy;
            }

            if (groupHierarchy !== undefined) {
                localVarQueryParameter['group_hierarchy'] = groupHierarchy;
            }

            if (polygonGeojson !== undefined) {
                localVarQueryParameter['polygon_geojson'] = polygonGeojson;
            }

            if (acceptLanguage !== undefined) {
                localVarQueryParameter['accept-language'] = acceptLanguage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Redirect to https://nominatim.openstreetmap.org/ui/polygons.html.
         * @summary List of broken polygons detected by Nominatim
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        polygons: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/polygons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DebugApi - functional programming interface
 * @export
 */
export const DebugApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DebugApiAxiosParamCreator(configuration)
    return {
        /**
         * Redirect to https://nominatim.openstreetmap.org/ui/deletable.html.
         * @summary List objects that have been deleted in OSM but are held back in Nominatim in case the deletion was accidental
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletable(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletable(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DebugApi.deletable']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This API endpoint is meant for visual inspection of the data in the database, mainly together with [Nominatim UI](https://github.com/osm-search/nominatim-ui/). The parameters of the endpoint and the output may change occasionally between versions of Nominatim. Do not rely on the output in scripts or applications.
         * @summary Show all details about a single place saved in the database
         * @param {OSMType} osmtype The type is required and it is one of node (N), way (W) or relation (R).
         * @param {number} osmid The id is required and it must be a number.
         * @param {string} [_class] The class parameter is optional and allows to distinguish between entries, when the corresponding OSM object has more than one main tag. For example, when a place is tagged with tourism&#x3D;hotel and amenity&#x3D;restaurant, there will be two place entries in Nominatim, one for a restaurant, one for a hotel. You need to specify class&#x3D;tourism or class&#x3D;amentity to get exactly the one you want. If there are multiple places in the database but the class parameter is left out, then one of the places will be chosen at random and displayed.
         * @param {number} [placeId] Place IDs are assigned sequentially during Nominatim data import. The ID for a place is different between Nominatim installation (servers) and changes when data gets reimported. Therefore it cannot be used as a permanent id and shouldn\&#39;t be used in bug reports.
         * @param {DetailsFormatEnum} [format] Format of response. See [Place Output Formats](https://nominatim.org/release-docs/develop/api/Output/) for details on each format. If not specified, it is equal to &#x60;json&#x60;.
         * @param {string} [jsonCallback] Wrap JSON output in a callback function (JSONP) i.e. &lt;string&gt;(&lt;json&gt;). Only has an effect for JSON output formats.
         * @param {number} [addressdetails] Include a breakdown of the address into elements. If not specified, it is equal to &#x60;0&#x60;.
         * @param {number} [keywords] Include a list of name keywords and address keywords in the result. If not specified, it is equal to &#x60;0&#x60;.
         * @param {number} [linkedplaces] Include details of places that are linked with this one. Places get linked together when they are different forms of the same physical object. Nominatim links two kinds of objects together: place nodes get linked with the corresponding administrative boundaries. Waterway relations get linked together with their members. If not specified, it is equal to &#x60;1&#x60;.
         * @param {number} [hierarchy] Include details of places lower in the address hierarchy. If not specified, it is equal to &#x60;0&#x60;.
         * @param {number} [groupHierarchy] The output of the address hierarchy will be grouped by type. If not specified, it is equal to &#x60;0&#x60;.
         * @param {number} [polygonGeojson] Include geometry of result as a GeoJSON. If not specified, it is equal to &#x60;0&#x60;.
         * @param {string} [acceptLanguage] Preferred language order for showing search results. This may either be a simple comma-separated list of language codes or have the same format as the [Accept-Language HTTP header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language). If not specified, it is equal to the content of Accept-Language HTTP header (browsers send the currently chosen browser language, command-line tools usually don\&#39;t send any Accept-Language header).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async details(osmtype: OSMType, osmid: number, _class?: string, placeId?: number, format?: DetailsFormatEnum, jsonCallback?: string, addressdetails?: number, keywords?: number, linkedplaces?: number, hierarchy?: number, groupHierarchy?: number, polygonGeojson?: number, acceptLanguage?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.details(osmtype, osmid, _class, placeId, format, jsonCallback, addressdetails, keywords, linkedplaces, hierarchy, groupHierarchy, polygonGeojson, acceptLanguage, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DebugApi.details']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Redirect to https://nominatim.openstreetmap.org/ui/polygons.html.
         * @summary List of broken polygons detected by Nominatim
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async polygons(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.polygons(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DebugApi.polygons']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * DebugApi - factory interface
 * @export
 */
export const DebugApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DebugApiFp(configuration)
    return {
        /**
         * Redirect to https://nominatim.openstreetmap.org/ui/deletable.html.
         * @summary List objects that have been deleted in OSM but are held back in Nominatim in case the deletion was accidental
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletable(options?: any): AxiosPromise<void> {
            return localVarFp.deletable(options).then((request) => request(axios, basePath));
        },
        /**
         * This API endpoint is meant for visual inspection of the data in the database, mainly together with [Nominatim UI](https://github.com/osm-search/nominatim-ui/). The parameters of the endpoint and the output may change occasionally between versions of Nominatim. Do not rely on the output in scripts or applications.
         * @summary Show all details about a single place saved in the database
         * @param {OSMType} osmtype The type is required and it is one of node (N), way (W) or relation (R).
         * @param {number} osmid The id is required and it must be a number.
         * @param {string} [_class] The class parameter is optional and allows to distinguish between entries, when the corresponding OSM object has more than one main tag. For example, when a place is tagged with tourism&#x3D;hotel and amenity&#x3D;restaurant, there will be two place entries in Nominatim, one for a restaurant, one for a hotel. You need to specify class&#x3D;tourism or class&#x3D;amentity to get exactly the one you want. If there are multiple places in the database but the class parameter is left out, then one of the places will be chosen at random and displayed.
         * @param {number} [placeId] Place IDs are assigned sequentially during Nominatim data import. The ID for a place is different between Nominatim installation (servers) and changes when data gets reimported. Therefore it cannot be used as a permanent id and shouldn\&#39;t be used in bug reports.
         * @param {DetailsFormatEnum} [format] Format of response. See [Place Output Formats](https://nominatim.org/release-docs/develop/api/Output/) for details on each format. If not specified, it is equal to &#x60;json&#x60;.
         * @param {string} [jsonCallback] Wrap JSON output in a callback function (JSONP) i.e. &lt;string&gt;(&lt;json&gt;). Only has an effect for JSON output formats.
         * @param {number} [addressdetails] Include a breakdown of the address into elements. If not specified, it is equal to &#x60;0&#x60;.
         * @param {number} [keywords] Include a list of name keywords and address keywords in the result. If not specified, it is equal to &#x60;0&#x60;.
         * @param {number} [linkedplaces] Include details of places that are linked with this one. Places get linked together when they are different forms of the same physical object. Nominatim links two kinds of objects together: place nodes get linked with the corresponding administrative boundaries. Waterway relations get linked together with their members. If not specified, it is equal to &#x60;1&#x60;.
         * @param {number} [hierarchy] Include details of places lower in the address hierarchy. If not specified, it is equal to &#x60;0&#x60;.
         * @param {number} [groupHierarchy] The output of the address hierarchy will be grouped by type. If not specified, it is equal to &#x60;0&#x60;.
         * @param {number} [polygonGeojson] Include geometry of result as a GeoJSON. If not specified, it is equal to &#x60;0&#x60;.
         * @param {string} [acceptLanguage] Preferred language order for showing search results. This may either be a simple comma-separated list of language codes or have the same format as the [Accept-Language HTTP header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language). If not specified, it is equal to the content of Accept-Language HTTP header (browsers send the currently chosen browser language, command-line tools usually don\&#39;t send any Accept-Language header).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        details(osmtype: OSMType, osmid: number, _class?: string, placeId?: number, format?: DetailsFormatEnum, jsonCallback?: string, addressdetails?: number, keywords?: number, linkedplaces?: number, hierarchy?: number, groupHierarchy?: number, polygonGeojson?: number, acceptLanguage?: string, options?: any): AxiosPromise<DetailsResponse> {
            return localVarFp.details(osmtype, osmid, _class, placeId, format, jsonCallback, addressdetails, keywords, linkedplaces, hierarchy, groupHierarchy, polygonGeojson, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Redirect to https://nominatim.openstreetmap.org/ui/polygons.html.
         * @summary List of broken polygons detected by Nominatim
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        polygons(options?: any): AxiosPromise<void> {
            return localVarFp.polygons(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DebugApi - interface
 * @export
 * @interface DebugApi
 */
export interface DebugApiInterface {
    /**
     * Redirect to https://nominatim.openstreetmap.org/ui/deletable.html.
     * @summary List objects that have been deleted in OSM but are held back in Nominatim in case the deletion was accidental
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DebugApiInterface
     */
    deletable(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * This API endpoint is meant for visual inspection of the data in the database, mainly together with [Nominatim UI](https://github.com/osm-search/nominatim-ui/). The parameters of the endpoint and the output may change occasionally between versions of Nominatim. Do not rely on the output in scripts or applications.
     * @summary Show all details about a single place saved in the database
     * @param {OSMType} osmtype The type is required and it is one of node (N), way (W) or relation (R).
     * @param {number} osmid The id is required and it must be a number.
     * @param {string} [_class] The class parameter is optional and allows to distinguish between entries, when the corresponding OSM object has more than one main tag. For example, when a place is tagged with tourism&#x3D;hotel and amenity&#x3D;restaurant, there will be two place entries in Nominatim, one for a restaurant, one for a hotel. You need to specify class&#x3D;tourism or class&#x3D;amentity to get exactly the one you want. If there are multiple places in the database but the class parameter is left out, then one of the places will be chosen at random and displayed.
     * @param {number} [placeId] Place IDs are assigned sequentially during Nominatim data import. The ID for a place is different between Nominatim installation (servers) and changes when data gets reimported. Therefore it cannot be used as a permanent id and shouldn\&#39;t be used in bug reports.
     * @param {DetailsFormatEnum} [format] Format of response. See [Place Output Formats](https://nominatim.org/release-docs/develop/api/Output/) for details on each format. If not specified, it is equal to &#x60;json&#x60;.
     * @param {string} [jsonCallback] Wrap JSON output in a callback function (JSONP) i.e. &lt;string&gt;(&lt;json&gt;). Only has an effect for JSON output formats.
     * @param {number} [addressdetails] Include a breakdown of the address into elements. If not specified, it is equal to &#x60;0&#x60;.
     * @param {number} [keywords] Include a list of name keywords and address keywords in the result. If not specified, it is equal to &#x60;0&#x60;.
     * @param {number} [linkedplaces] Include details of places that are linked with this one. Places get linked together when they are different forms of the same physical object. Nominatim links two kinds of objects together: place nodes get linked with the corresponding administrative boundaries. Waterway relations get linked together with their members. If not specified, it is equal to &#x60;1&#x60;.
     * @param {number} [hierarchy] Include details of places lower in the address hierarchy. If not specified, it is equal to &#x60;0&#x60;.
     * @param {number} [groupHierarchy] The output of the address hierarchy will be grouped by type. If not specified, it is equal to &#x60;0&#x60;.
     * @param {number} [polygonGeojson] Include geometry of result as a GeoJSON. If not specified, it is equal to &#x60;0&#x60;.
     * @param {string} [acceptLanguage] Preferred language order for showing search results. This may either be a simple comma-separated list of language codes or have the same format as the [Accept-Language HTTP header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language). If not specified, it is equal to the content of Accept-Language HTTP header (browsers send the currently chosen browser language, command-line tools usually don\&#39;t send any Accept-Language header).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DebugApiInterface
     */
    details(osmtype: OSMType, osmid: number, _class?: string, placeId?: number, format?: DetailsFormatEnum, jsonCallback?: string, addressdetails?: number, keywords?: number, linkedplaces?: number, hierarchy?: number, groupHierarchy?: number, polygonGeojson?: number, acceptLanguage?: string, options?: RawAxiosRequestConfig): AxiosPromise<DetailsResponse>;

    /**
     * Redirect to https://nominatim.openstreetmap.org/ui/polygons.html.
     * @summary List of broken polygons detected by Nominatim
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DebugApiInterface
     */
    polygons(options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * DebugApi - object-oriented interface
 * @export
 * @class DebugApi
 * @extends {BaseAPI}
 */
export class DebugApi extends BaseAPI implements DebugApiInterface {
    /**
     * Redirect to https://nominatim.openstreetmap.org/ui/deletable.html.
     * @summary List objects that have been deleted in OSM but are held back in Nominatim in case the deletion was accidental
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DebugApi
     */
    public deletable(options?: RawAxiosRequestConfig) {
        return DebugApiFp(this.configuration).deletable(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API endpoint is meant for visual inspection of the data in the database, mainly together with [Nominatim UI](https://github.com/osm-search/nominatim-ui/). The parameters of the endpoint and the output may change occasionally between versions of Nominatim. Do not rely on the output in scripts or applications.
     * @summary Show all details about a single place saved in the database
     * @param {OSMType} osmtype The type is required and it is one of node (N), way (W) or relation (R).
     * @param {number} osmid The id is required and it must be a number.
     * @param {string} [_class] The class parameter is optional and allows to distinguish between entries, when the corresponding OSM object has more than one main tag. For example, when a place is tagged with tourism&#x3D;hotel and amenity&#x3D;restaurant, there will be two place entries in Nominatim, one for a restaurant, one for a hotel. You need to specify class&#x3D;tourism or class&#x3D;amentity to get exactly the one you want. If there are multiple places in the database but the class parameter is left out, then one of the places will be chosen at random and displayed.
     * @param {number} [placeId] Place IDs are assigned sequentially during Nominatim data import. The ID for a place is different between Nominatim installation (servers) and changes when data gets reimported. Therefore it cannot be used as a permanent id and shouldn\&#39;t be used in bug reports.
     * @param {DetailsFormatEnum} [format] Format of response. See [Place Output Formats](https://nominatim.org/release-docs/develop/api/Output/) for details on each format. If not specified, it is equal to &#x60;json&#x60;.
     * @param {string} [jsonCallback] Wrap JSON output in a callback function (JSONP) i.e. &lt;string&gt;(&lt;json&gt;). Only has an effect for JSON output formats.
     * @param {number} [addressdetails] Include a breakdown of the address into elements. If not specified, it is equal to &#x60;0&#x60;.
     * @param {number} [keywords] Include a list of name keywords and address keywords in the result. If not specified, it is equal to &#x60;0&#x60;.
     * @param {number} [linkedplaces] Include details of places that are linked with this one. Places get linked together when they are different forms of the same physical object. Nominatim links two kinds of objects together: place nodes get linked with the corresponding administrative boundaries. Waterway relations get linked together with their members. If not specified, it is equal to &#x60;1&#x60;.
     * @param {number} [hierarchy] Include details of places lower in the address hierarchy. If not specified, it is equal to &#x60;0&#x60;.
     * @param {number} [groupHierarchy] The output of the address hierarchy will be grouped by type. If not specified, it is equal to &#x60;0&#x60;.
     * @param {number} [polygonGeojson] Include geometry of result as a GeoJSON. If not specified, it is equal to &#x60;0&#x60;.
     * @param {string} [acceptLanguage] Preferred language order for showing search results. This may either be a simple comma-separated list of language codes or have the same format as the [Accept-Language HTTP header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language). If not specified, it is equal to the content of Accept-Language HTTP header (browsers send the currently chosen browser language, command-line tools usually don\&#39;t send any Accept-Language header).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DebugApi
     */
    public details(osmtype: OSMType, osmid: number, _class?: string, placeId?: number, format?: DetailsFormatEnum, jsonCallback?: string, addressdetails?: number, keywords?: number, linkedplaces?: number, hierarchy?: number, groupHierarchy?: number, polygonGeojson?: number, acceptLanguage?: string, options?: RawAxiosRequestConfig) {
        return DebugApiFp(this.configuration).details(osmtype, osmid, _class, placeId, format, jsonCallback, addressdetails, keywords, linkedplaces, hierarchy, groupHierarchy, polygonGeojson, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Redirect to https://nominatim.openstreetmap.org/ui/polygons.html.
     * @summary List of broken polygons detected by Nominatim
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DebugApi
     */
    public polygons(options?: RawAxiosRequestConfig) {
        return DebugApiFp(this.configuration).polygons(options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const DetailsFormatEnum = {
    Json: 'json'
} as const;
export type DetailsFormatEnum = typeof DetailsFormatEnum[keyof typeof DetailsFormatEnum];


/**
 * LookupApi - axios parameter creator
 * @export
 */
export const LookupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The lookup API allows to query the address and other details of one or multiple OSM objects like node, way or relation.
         * @summary Query the address and other details of one or multiple OSM objects like node, way or relation
         * @param {string} osmIds Comma-separated list of OSM ids each prefixed with its type, one of node (N), way (W) or relation (R). Up to 50 ids can be queried at the same time.
         * @param {LookupFormatEnum} [format] Format of response. See [Place Output Formats](https://nominatim.org/release-docs/develop/api/Output/) for details on each format. If not specified, it is equal to &#x60;jsonv2&#x60;.
         * @param {string} [jsonCallback] Wrap JSON output in a callback function (JSONP) i.e. &lt;string&gt;(&lt;json&gt;). Only has an effect for JSON output formats.
         * @param {number} [addressdetails] Include a breakdown of the address into elements. If not specified, it is equal to &#x60;0&#x60;.
         * @param {number} [extratags] Include additional information in the result if available, e.g. wikipedia link, opening hours. If not specified, it is equal to &#x60;0&#x60;.
         * @param {number} [namedetails] Include a full list of names for the result. These may include language variants, older names, references and brand. If not specified, it is equal to &#x60;0&#x60;.
         * @param {string} [acceptLanguage] Preferred language order for showing search results. This may either be a simple comma-separated list of language codes or have the same format as the [Accept-Language HTTP header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language). If not specified, it is equal to the content of Accept-Language HTTP header (browsers send the currently chosen browser language, command-line tools usually don\&#39;t send any Accept-Language header).
         * @param {number} [polygonGeojson] Output geometry of results as a GeoJSON.
         * @param {number} [polygonKml] Output geometry of results as a KML.
         * @param {number} [polygonSvg] Output geometry of results as a SVG.
         * @param {number} [polygonText] Output geometry of results as a WKT.
         * @param {number} [polygonThreshold] When one of the polygon_* outputs is chosen, return a simplified version of the output geometry. The parameter is the tolerance in degrees with which the geometry may differ from the original geometry. Topology is preserved in the result.
         * @param {string} [email] If you are making large numbers of request please include an appropriate email address to identify your requests. See Nominatim\&#39;s [Usage Policy](https://operations.osmfoundation.org/policies/nominatim/) for more details.
         * @param {number} [debug] Output assorted developer debug information. Data on internals of Nominatim\&#39;s Search Loop logic, and SQL queries. The output is (rough) HTML format. This overrides the specified machine readable format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lookup: async (osmIds: string, format?: LookupFormatEnum, jsonCallback?: string, addressdetails?: number, extratags?: number, namedetails?: number, acceptLanguage?: string, polygonGeojson?: number, polygonKml?: number, polygonSvg?: number, polygonText?: number, polygonThreshold?: number, email?: string, debug?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'osmIds' is not null or undefined
            assertParamExists('lookup', 'osmIds', osmIds)
            const localVarPath = `/lookup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (osmIds !== undefined) {
                localVarQueryParameter['osm_ids'] = osmIds;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (jsonCallback !== undefined) {
                localVarQueryParameter['json_callback'] = jsonCallback;
            }

            if (addressdetails !== undefined) {
                localVarQueryParameter['addressdetails'] = addressdetails;
            }

            if (extratags !== undefined) {
                localVarQueryParameter['extratags'] = extratags;
            }

            if (namedetails !== undefined) {
                localVarQueryParameter['namedetails'] = namedetails;
            }

            if (acceptLanguage !== undefined) {
                localVarQueryParameter['accept-language'] = acceptLanguage;
            }

            if (polygonGeojson !== undefined) {
                localVarQueryParameter['polygon_geojson'] = polygonGeojson;
            }

            if (polygonKml !== undefined) {
                localVarQueryParameter['polygon_kml'] = polygonKml;
            }

            if (polygonSvg !== undefined) {
                localVarQueryParameter['polygon_svg'] = polygonSvg;
            }

            if (polygonText !== undefined) {
                localVarQueryParameter['polygon_text'] = polygonText;
            }

            if (polygonThreshold !== undefined) {
                localVarQueryParameter['polygon_threshold'] = polygonThreshold;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (debug !== undefined) {
                localVarQueryParameter['debug'] = debug;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LookupApi - functional programming interface
 * @export
 */
export const LookupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LookupApiAxiosParamCreator(configuration)
    return {
        /**
         * The lookup API allows to query the address and other details of one or multiple OSM objects like node, way or relation.
         * @summary Query the address and other details of one or multiple OSM objects like node, way or relation
         * @param {string} osmIds Comma-separated list of OSM ids each prefixed with its type, one of node (N), way (W) or relation (R). Up to 50 ids can be queried at the same time.
         * @param {LookupFormatEnum} [format] Format of response. See [Place Output Formats](https://nominatim.org/release-docs/develop/api/Output/) for details on each format. If not specified, it is equal to &#x60;jsonv2&#x60;.
         * @param {string} [jsonCallback] Wrap JSON output in a callback function (JSONP) i.e. &lt;string&gt;(&lt;json&gt;). Only has an effect for JSON output formats.
         * @param {number} [addressdetails] Include a breakdown of the address into elements. If not specified, it is equal to &#x60;0&#x60;.
         * @param {number} [extratags] Include additional information in the result if available, e.g. wikipedia link, opening hours. If not specified, it is equal to &#x60;0&#x60;.
         * @param {number} [namedetails] Include a full list of names for the result. These may include language variants, older names, references and brand. If not specified, it is equal to &#x60;0&#x60;.
         * @param {string} [acceptLanguage] Preferred language order for showing search results. This may either be a simple comma-separated list of language codes or have the same format as the [Accept-Language HTTP header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language). If not specified, it is equal to the content of Accept-Language HTTP header (browsers send the currently chosen browser language, command-line tools usually don\&#39;t send any Accept-Language header).
         * @param {number} [polygonGeojson] Output geometry of results as a GeoJSON.
         * @param {number} [polygonKml] Output geometry of results as a KML.
         * @param {number} [polygonSvg] Output geometry of results as a SVG.
         * @param {number} [polygonText] Output geometry of results as a WKT.
         * @param {number} [polygonThreshold] When one of the polygon_* outputs is chosen, return a simplified version of the output geometry. The parameter is the tolerance in degrees with which the geometry may differ from the original geometry. Topology is preserved in the result.
         * @param {string} [email] If you are making large numbers of request please include an appropriate email address to identify your requests. See Nominatim\&#39;s [Usage Policy](https://operations.osmfoundation.org/policies/nominatim/) for more details.
         * @param {number} [debug] Output assorted developer debug information. Data on internals of Nominatim\&#39;s Search Loop logic, and SQL queries. The output is (rough) HTML format. This overrides the specified machine readable format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lookup(osmIds: string, format?: LookupFormatEnum, jsonCallback?: string, addressdetails?: number, extratags?: number, namedetails?: number, acceptLanguage?: string, polygonGeojson?: number, polygonKml?: number, polygonSvg?: number, polygonText?: number, polygonThreshold?: number, email?: string, debug?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OSMGeocodeJson>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lookup(osmIds, format, jsonCallback, addressdetails, extratags, namedetails, acceptLanguage, polygonGeojson, polygonKml, polygonSvg, polygonText, polygonThreshold, email, debug, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LookupApi.lookup']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * LookupApi - factory interface
 * @export
 */
export const LookupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LookupApiFp(configuration)
    return {
        /**
         * The lookup API allows to query the address and other details of one or multiple OSM objects like node, way or relation.
         * @summary Query the address and other details of one or multiple OSM objects like node, way or relation
         * @param {string} osmIds Comma-separated list of OSM ids each prefixed with its type, one of node (N), way (W) or relation (R). Up to 50 ids can be queried at the same time.
         * @param {LookupFormatEnum} [format] Format of response. See [Place Output Formats](https://nominatim.org/release-docs/develop/api/Output/) for details on each format. If not specified, it is equal to &#x60;jsonv2&#x60;.
         * @param {string} [jsonCallback] Wrap JSON output in a callback function (JSONP) i.e. &lt;string&gt;(&lt;json&gt;). Only has an effect for JSON output formats.
         * @param {number} [addressdetails] Include a breakdown of the address into elements. If not specified, it is equal to &#x60;0&#x60;.
         * @param {number} [extratags] Include additional information in the result if available, e.g. wikipedia link, opening hours. If not specified, it is equal to &#x60;0&#x60;.
         * @param {number} [namedetails] Include a full list of names for the result. These may include language variants, older names, references and brand. If not specified, it is equal to &#x60;0&#x60;.
         * @param {string} [acceptLanguage] Preferred language order for showing search results. This may either be a simple comma-separated list of language codes or have the same format as the [Accept-Language HTTP header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language). If not specified, it is equal to the content of Accept-Language HTTP header (browsers send the currently chosen browser language, command-line tools usually don\&#39;t send any Accept-Language header).
         * @param {number} [polygonGeojson] Output geometry of results as a GeoJSON.
         * @param {number} [polygonKml] Output geometry of results as a KML.
         * @param {number} [polygonSvg] Output geometry of results as a SVG.
         * @param {number} [polygonText] Output geometry of results as a WKT.
         * @param {number} [polygonThreshold] When one of the polygon_* outputs is chosen, return a simplified version of the output geometry. The parameter is the tolerance in degrees with which the geometry may differ from the original geometry. Topology is preserved in the result.
         * @param {string} [email] If you are making large numbers of request please include an appropriate email address to identify your requests. See Nominatim\&#39;s [Usage Policy](https://operations.osmfoundation.org/policies/nominatim/) for more details.
         * @param {number} [debug] Output assorted developer debug information. Data on internals of Nominatim\&#39;s Search Loop logic, and SQL queries. The output is (rough) HTML format. This overrides the specified machine readable format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lookup(osmIds: string, format?: LookupFormatEnum, jsonCallback?: string, addressdetails?: number, extratags?: number, namedetails?: number, acceptLanguage?: string, polygonGeojson?: number, polygonKml?: number, polygonSvg?: number, polygonText?: number, polygonThreshold?: number, email?: string, debug?: number, options?: any): AxiosPromise<Array<OSMGeocodeJson>> {
            return localVarFp.lookup(osmIds, format, jsonCallback, addressdetails, extratags, namedetails, acceptLanguage, polygonGeojson, polygonKml, polygonSvg, polygonText, polygonThreshold, email, debug, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LookupApi - interface
 * @export
 * @interface LookupApi
 */
export interface LookupApiInterface {
    /**
     * The lookup API allows to query the address and other details of one or multiple OSM objects like node, way or relation.
     * @summary Query the address and other details of one or multiple OSM objects like node, way or relation
     * @param {string} osmIds Comma-separated list of OSM ids each prefixed with its type, one of node (N), way (W) or relation (R). Up to 50 ids can be queried at the same time.
     * @param {LookupFormatEnum} [format] Format of response. See [Place Output Formats](https://nominatim.org/release-docs/develop/api/Output/) for details on each format. If not specified, it is equal to &#x60;jsonv2&#x60;.
     * @param {string} [jsonCallback] Wrap JSON output in a callback function (JSONP) i.e. &lt;string&gt;(&lt;json&gt;). Only has an effect for JSON output formats.
     * @param {number} [addressdetails] Include a breakdown of the address into elements. If not specified, it is equal to &#x60;0&#x60;.
     * @param {number} [extratags] Include additional information in the result if available, e.g. wikipedia link, opening hours. If not specified, it is equal to &#x60;0&#x60;.
     * @param {number} [namedetails] Include a full list of names for the result. These may include language variants, older names, references and brand. If not specified, it is equal to &#x60;0&#x60;.
     * @param {string} [acceptLanguage] Preferred language order for showing search results. This may either be a simple comma-separated list of language codes or have the same format as the [Accept-Language HTTP header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language). If not specified, it is equal to the content of Accept-Language HTTP header (browsers send the currently chosen browser language, command-line tools usually don\&#39;t send any Accept-Language header).
     * @param {number} [polygonGeojson] Output geometry of results as a GeoJSON.
     * @param {number} [polygonKml] Output geometry of results as a KML.
     * @param {number} [polygonSvg] Output geometry of results as a SVG.
     * @param {number} [polygonText] Output geometry of results as a WKT.
     * @param {number} [polygonThreshold] When one of the polygon_* outputs is chosen, return a simplified version of the output geometry. The parameter is the tolerance in degrees with which the geometry may differ from the original geometry. Topology is preserved in the result.
     * @param {string} [email] If you are making large numbers of request please include an appropriate email address to identify your requests. See Nominatim\&#39;s [Usage Policy](https://operations.osmfoundation.org/policies/nominatim/) for more details.
     * @param {number} [debug] Output assorted developer debug information. Data on internals of Nominatim\&#39;s Search Loop logic, and SQL queries. The output is (rough) HTML format. This overrides the specified machine readable format.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LookupApiInterface
     */
    lookup(osmIds: string, format?: LookupFormatEnum, jsonCallback?: string, addressdetails?: number, extratags?: number, namedetails?: number, acceptLanguage?: string, polygonGeojson?: number, polygonKml?: number, polygonSvg?: number, polygonText?: number, polygonThreshold?: number, email?: string, debug?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<OSMGeocodeJson>>;

}

/**
 * LookupApi - object-oriented interface
 * @export
 * @class LookupApi
 * @extends {BaseAPI}
 */
export class LookupApi extends BaseAPI implements LookupApiInterface {
    /**
     * The lookup API allows to query the address and other details of one or multiple OSM objects like node, way or relation.
     * @summary Query the address and other details of one or multiple OSM objects like node, way or relation
     * @param {string} osmIds Comma-separated list of OSM ids each prefixed with its type, one of node (N), way (W) or relation (R). Up to 50 ids can be queried at the same time.
     * @param {LookupFormatEnum} [format] Format of response. See [Place Output Formats](https://nominatim.org/release-docs/develop/api/Output/) for details on each format. If not specified, it is equal to &#x60;jsonv2&#x60;.
     * @param {string} [jsonCallback] Wrap JSON output in a callback function (JSONP) i.e. &lt;string&gt;(&lt;json&gt;). Only has an effect for JSON output formats.
     * @param {number} [addressdetails] Include a breakdown of the address into elements. If not specified, it is equal to &#x60;0&#x60;.
     * @param {number} [extratags] Include additional information in the result if available, e.g. wikipedia link, opening hours. If not specified, it is equal to &#x60;0&#x60;.
     * @param {number} [namedetails] Include a full list of names for the result. These may include language variants, older names, references and brand. If not specified, it is equal to &#x60;0&#x60;.
     * @param {string} [acceptLanguage] Preferred language order for showing search results. This may either be a simple comma-separated list of language codes or have the same format as the [Accept-Language HTTP header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language). If not specified, it is equal to the content of Accept-Language HTTP header (browsers send the currently chosen browser language, command-line tools usually don\&#39;t send any Accept-Language header).
     * @param {number} [polygonGeojson] Output geometry of results as a GeoJSON.
     * @param {number} [polygonKml] Output geometry of results as a KML.
     * @param {number} [polygonSvg] Output geometry of results as a SVG.
     * @param {number} [polygonText] Output geometry of results as a WKT.
     * @param {number} [polygonThreshold] When one of the polygon_* outputs is chosen, return a simplified version of the output geometry. The parameter is the tolerance in degrees with which the geometry may differ from the original geometry. Topology is preserved in the result.
     * @param {string} [email] If you are making large numbers of request please include an appropriate email address to identify your requests. See Nominatim\&#39;s [Usage Policy](https://operations.osmfoundation.org/policies/nominatim/) for more details.
     * @param {number} [debug] Output assorted developer debug information. Data on internals of Nominatim\&#39;s Search Loop logic, and SQL queries. The output is (rough) HTML format. This overrides the specified machine readable format.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LookupApi
     */
    public lookup(osmIds: string, format?: LookupFormatEnum, jsonCallback?: string, addressdetails?: number, extratags?: number, namedetails?: number, acceptLanguage?: string, polygonGeojson?: number, polygonKml?: number, polygonSvg?: number, polygonText?: number, polygonThreshold?: number, email?: string, debug?: number, options?: RawAxiosRequestConfig) {
        return LookupApiFp(this.configuration).lookup(osmIds, format, jsonCallback, addressdetails, extratags, namedetails, acceptLanguage, polygonGeojson, polygonKml, polygonSvg, polygonText, polygonThreshold, email, debug, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const LookupFormatEnum = {
    Xml: 'xml',
    Json: 'json',
    Jsonv2: 'jsonv2',
    Geojson: 'geojson',
    Geocodejson: 'geocodejson'
} as const;
export type LookupFormatEnum = typeof LookupFormatEnum[keyof typeof LookupFormatEnum];


/**
 * ReverseApi - axios parameter creator
 * @export
 */
export const ReverseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The reverse geocoding API returns exactly one result or an error when the coordinate is in an area with no OSM data coverage. It does not exactly compute the address for the coordinate it receives. It works by finding the closest suitable OSM object and returning its address information. This may occasionally lead to unexpected results. First of all, Nominatim only includes OSM objects in its index that are suitable for searching. Small, unnamed paths for example are missing from the database and can therefore not be used for reverse geocoding either. The other issue to be aware of is that the closest OSM object may not always have a similar enough address to the coordinate you were requesting. For example, in dense city areas it may belong to a completely different street.
         * @summary Generate an address from a coordinate given as latitude and longitude
         * @param {number} [lat] Latitude of a coordinate in WGS84 projection.
         * @param {number} [lon] Longitude of a coordinate in WGS84 projection.
         * @param {ReverseFormatEnum} [format] Format of response. See [Place Output Formats](https://nominatim.org/release-docs/develop/api/Output/) for details on each format. If not specified, it is equal to &#x60;xml&#x60;.
         * @param {string} [jsonCallback] Wrap JSON output in a callback function (JSONP) i.e. &lt;string&gt;(&lt;json&gt;). Only has an effect for JSON output formats.
         * @param {number} [addressdetails] Include a breakdown of the address into elements. If not specified, it is equal to &#x60;1&#x60;.
         * @param {number} [extratags] Include additional information in the result if available, e.g. wikipedia link, opening hours. If not specified, it is equal to &#x60;0&#x60;.
         * @param {number} [namedetails] Include a full list of names for the result. These may include language variants, older names, references and brand. If not specified, it is equal to &#x60;0&#x60;.
         * @param {string} [acceptLanguage] Preferred language order for showing search results. This may either be a simple comma-separated list of language codes or have the same format as the [Accept-Language HTTP header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language). If not specified, it is equal to the content of Accept-Language HTTP header (browsers send the currently chosen browser language, command-line tools usually don\&#39;t send any Accept-Language header).
         * @param {number} [zoom] Level of detail required for the address. This is a number that corresponds roughly to the zoom level used in XYZ tile sources in frameworks like Leaflet.js, Openlayers etc. In terms of address details the zoom levels are as follows: 3) country, 5) state, 8) county, 10) city, 12) town / borough, 13) village / suburb, 14) neighbourhood, 15) any settlement, 16) major streets, 17) major and minor streets, 18) building.
         * @param {string} [layer] The layer filter allows to select places by themes, a comma-separated list of &#x60;address&#x60; (all places that make up an address: address points with house numbers, streets, inhabited places like suburbs, villages, cities, states, and administrative boundaries), &#x60;poi&#x60; (all points of interest like restaurants, shops, hotels but also less obvious features like recycling bins, guideposts or benches), &#x60;railway&#x60; (infrastructures like tracks), &#x60;natural&#x60; (feautures like rivers, lakes and mountains), &#x60;manmade&#x60; (catch-all for features not covered by the other layers).
         * @param {number} [polygonGeojson] Output geometry of results as a GeoJSON.
         * @param {number} [polygonKml] Output geometry of results as a KML.
         * @param {number} [polygonSvg] Output geometry of results as a SVG.
         * @param {number} [polygonText] Output geometry of results as a WKT.
         * @param {number} [polygonThreshold] When one of the polygon_* outputs is chosen, return a simplified version of the output geometry. The parameter is the tolerance in degrees with which the geometry may differ from the original geometry. Topology is preserved in the result.
         * @param {string} [email] If you are making large numbers of request please include an appropriate email address to identify your requests. See Nominatim\&#39;s [Usage Policy](https://operations.osmfoundation.org/policies/nominatim/) for more details.
         * @param {number} [debug] Output assorted developer debug information. Data on internals of Nominatim\&#39;s Search Loop logic, and SQL queries. The output is (rough) HTML format. This overrides the specified machine readable format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reverse: async (lat?: number, lon?: number, format?: ReverseFormatEnum, jsonCallback?: string, addressdetails?: number, extratags?: number, namedetails?: number, acceptLanguage?: string, zoom?: number, layer?: string, polygonGeojson?: number, polygonKml?: number, polygonSvg?: number, polygonText?: number, polygonThreshold?: number, email?: string, debug?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reverse`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (lat !== undefined) {
                localVarQueryParameter['lat'] = lat;
            }

            if (lon !== undefined) {
                localVarQueryParameter['lon'] = lon;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (jsonCallback !== undefined) {
                localVarQueryParameter['json_callback'] = jsonCallback;
            }

            if (addressdetails !== undefined) {
                localVarQueryParameter['addressdetails'] = addressdetails;
            }

            if (extratags !== undefined) {
                localVarQueryParameter['extratags'] = extratags;
            }

            if (namedetails !== undefined) {
                localVarQueryParameter['namedetails'] = namedetails;
            }

            if (acceptLanguage !== undefined) {
                localVarQueryParameter['accept-language'] = acceptLanguage;
            }

            if (zoom !== undefined) {
                localVarQueryParameter['zoom'] = zoom;
            }

            if (layer !== undefined) {
                localVarQueryParameter['layer'] = layer;
            }

            if (polygonGeojson !== undefined) {
                localVarQueryParameter['polygon_geojson'] = polygonGeojson;
            }

            if (polygonKml !== undefined) {
                localVarQueryParameter['polygon_kml'] = polygonKml;
            }

            if (polygonSvg !== undefined) {
                localVarQueryParameter['polygon_svg'] = polygonSvg;
            }

            if (polygonText !== undefined) {
                localVarQueryParameter['polygon_text'] = polygonText;
            }

            if (polygonThreshold !== undefined) {
                localVarQueryParameter['polygon_threshold'] = polygonThreshold;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (debug !== undefined) {
                localVarQueryParameter['debug'] = debug;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReverseApi - functional programming interface
 * @export
 */
export const ReverseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReverseApiAxiosParamCreator(configuration)
    return {
        /**
         * The reverse geocoding API returns exactly one result or an error when the coordinate is in an area with no OSM data coverage. It does not exactly compute the address for the coordinate it receives. It works by finding the closest suitable OSM object and returning its address information. This may occasionally lead to unexpected results. First of all, Nominatim only includes OSM objects in its index that are suitable for searching. Small, unnamed paths for example are missing from the database and can therefore not be used for reverse geocoding either. The other issue to be aware of is that the closest OSM object may not always have a similar enough address to the coordinate you were requesting. For example, in dense city areas it may belong to a completely different street.
         * @summary Generate an address from a coordinate given as latitude and longitude
         * @param {number} [lat] Latitude of a coordinate in WGS84 projection.
         * @param {number} [lon] Longitude of a coordinate in WGS84 projection.
         * @param {ReverseFormatEnum} [format] Format of response. See [Place Output Formats](https://nominatim.org/release-docs/develop/api/Output/) for details on each format. If not specified, it is equal to &#x60;xml&#x60;.
         * @param {string} [jsonCallback] Wrap JSON output in a callback function (JSONP) i.e. &lt;string&gt;(&lt;json&gt;). Only has an effect for JSON output formats.
         * @param {number} [addressdetails] Include a breakdown of the address into elements. If not specified, it is equal to &#x60;1&#x60;.
         * @param {number} [extratags] Include additional information in the result if available, e.g. wikipedia link, opening hours. If not specified, it is equal to &#x60;0&#x60;.
         * @param {number} [namedetails] Include a full list of names for the result. These may include language variants, older names, references and brand. If not specified, it is equal to &#x60;0&#x60;.
         * @param {string} [acceptLanguage] Preferred language order for showing search results. This may either be a simple comma-separated list of language codes or have the same format as the [Accept-Language HTTP header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language). If not specified, it is equal to the content of Accept-Language HTTP header (browsers send the currently chosen browser language, command-line tools usually don\&#39;t send any Accept-Language header).
         * @param {number} [zoom] Level of detail required for the address. This is a number that corresponds roughly to the zoom level used in XYZ tile sources in frameworks like Leaflet.js, Openlayers etc. In terms of address details the zoom levels are as follows: 3) country, 5) state, 8) county, 10) city, 12) town / borough, 13) village / suburb, 14) neighbourhood, 15) any settlement, 16) major streets, 17) major and minor streets, 18) building.
         * @param {string} [layer] The layer filter allows to select places by themes, a comma-separated list of &#x60;address&#x60; (all places that make up an address: address points with house numbers, streets, inhabited places like suburbs, villages, cities, states, and administrative boundaries), &#x60;poi&#x60; (all points of interest like restaurants, shops, hotels but also less obvious features like recycling bins, guideposts or benches), &#x60;railway&#x60; (infrastructures like tracks), &#x60;natural&#x60; (feautures like rivers, lakes and mountains), &#x60;manmade&#x60; (catch-all for features not covered by the other layers).
         * @param {number} [polygonGeojson] Output geometry of results as a GeoJSON.
         * @param {number} [polygonKml] Output geometry of results as a KML.
         * @param {number} [polygonSvg] Output geometry of results as a SVG.
         * @param {number} [polygonText] Output geometry of results as a WKT.
         * @param {number} [polygonThreshold] When one of the polygon_* outputs is chosen, return a simplified version of the output geometry. The parameter is the tolerance in degrees with which the geometry may differ from the original geometry. Topology is preserved in the result.
         * @param {string} [email] If you are making large numbers of request please include an appropriate email address to identify your requests. See Nominatim\&#39;s [Usage Policy](https://operations.osmfoundation.org/policies/nominatim/) for more details.
         * @param {number} [debug] Output assorted developer debug information. Data on internals of Nominatim\&#39;s Search Loop logic, and SQL queries. The output is (rough) HTML format. This overrides the specified machine readable format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reverse(lat?: number, lon?: number, format?: ReverseFormatEnum, jsonCallback?: string, addressdetails?: number, extratags?: number, namedetails?: number, acceptLanguage?: string, zoom?: number, layer?: string, polygonGeojson?: number, polygonKml?: number, polygonSvg?: number, polygonText?: number, polygonThreshold?: number, email?: string, debug?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OSMGeocodeJson>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reverse(lat, lon, format, jsonCallback, addressdetails, extratags, namedetails, acceptLanguage, zoom, layer, polygonGeojson, polygonKml, polygonSvg, polygonText, polygonThreshold, email, debug, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ReverseApi.reverse']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ReverseApi - factory interface
 * @export
 */
export const ReverseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReverseApiFp(configuration)
    return {
        /**
         * The reverse geocoding API returns exactly one result or an error when the coordinate is in an area with no OSM data coverage. It does not exactly compute the address for the coordinate it receives. It works by finding the closest suitable OSM object and returning its address information. This may occasionally lead to unexpected results. First of all, Nominatim only includes OSM objects in its index that are suitable for searching. Small, unnamed paths for example are missing from the database and can therefore not be used for reverse geocoding either. The other issue to be aware of is that the closest OSM object may not always have a similar enough address to the coordinate you were requesting. For example, in dense city areas it may belong to a completely different street.
         * @summary Generate an address from a coordinate given as latitude and longitude
         * @param {number} [lat] Latitude of a coordinate in WGS84 projection.
         * @param {number} [lon] Longitude of a coordinate in WGS84 projection.
         * @param {ReverseFormatEnum} [format] Format of response. See [Place Output Formats](https://nominatim.org/release-docs/develop/api/Output/) for details on each format. If not specified, it is equal to &#x60;xml&#x60;.
         * @param {string} [jsonCallback] Wrap JSON output in a callback function (JSONP) i.e. &lt;string&gt;(&lt;json&gt;). Only has an effect for JSON output formats.
         * @param {number} [addressdetails] Include a breakdown of the address into elements. If not specified, it is equal to &#x60;1&#x60;.
         * @param {number} [extratags] Include additional information in the result if available, e.g. wikipedia link, opening hours. If not specified, it is equal to &#x60;0&#x60;.
         * @param {number} [namedetails] Include a full list of names for the result. These may include language variants, older names, references and brand. If not specified, it is equal to &#x60;0&#x60;.
         * @param {string} [acceptLanguage] Preferred language order for showing search results. This may either be a simple comma-separated list of language codes or have the same format as the [Accept-Language HTTP header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language). If not specified, it is equal to the content of Accept-Language HTTP header (browsers send the currently chosen browser language, command-line tools usually don\&#39;t send any Accept-Language header).
         * @param {number} [zoom] Level of detail required for the address. This is a number that corresponds roughly to the zoom level used in XYZ tile sources in frameworks like Leaflet.js, Openlayers etc. In terms of address details the zoom levels are as follows: 3) country, 5) state, 8) county, 10) city, 12) town / borough, 13) village / suburb, 14) neighbourhood, 15) any settlement, 16) major streets, 17) major and minor streets, 18) building.
         * @param {string} [layer] The layer filter allows to select places by themes, a comma-separated list of &#x60;address&#x60; (all places that make up an address: address points with house numbers, streets, inhabited places like suburbs, villages, cities, states, and administrative boundaries), &#x60;poi&#x60; (all points of interest like restaurants, shops, hotels but also less obvious features like recycling bins, guideposts or benches), &#x60;railway&#x60; (infrastructures like tracks), &#x60;natural&#x60; (feautures like rivers, lakes and mountains), &#x60;manmade&#x60; (catch-all for features not covered by the other layers).
         * @param {number} [polygonGeojson] Output geometry of results as a GeoJSON.
         * @param {number} [polygonKml] Output geometry of results as a KML.
         * @param {number} [polygonSvg] Output geometry of results as a SVG.
         * @param {number} [polygonText] Output geometry of results as a WKT.
         * @param {number} [polygonThreshold] When one of the polygon_* outputs is chosen, return a simplified version of the output geometry. The parameter is the tolerance in degrees with which the geometry may differ from the original geometry. Topology is preserved in the result.
         * @param {string} [email] If you are making large numbers of request please include an appropriate email address to identify your requests. See Nominatim\&#39;s [Usage Policy](https://operations.osmfoundation.org/policies/nominatim/) for more details.
         * @param {number} [debug] Output assorted developer debug information. Data on internals of Nominatim\&#39;s Search Loop logic, and SQL queries. The output is (rough) HTML format. This overrides the specified machine readable format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reverse(lat?: number, lon?: number, format?: ReverseFormatEnum, jsonCallback?: string, addressdetails?: number, extratags?: number, namedetails?: number, acceptLanguage?: string, zoom?: number, layer?: string, polygonGeojson?: number, polygonKml?: number, polygonSvg?: number, polygonText?: number, polygonThreshold?: number, email?: string, debug?: number, options?: any): AxiosPromise<OSMGeocodeJson> {
            return localVarFp.reverse(lat, lon, format, jsonCallback, addressdetails, extratags, namedetails, acceptLanguage, zoom, layer, polygonGeojson, polygonKml, polygonSvg, polygonText, polygonThreshold, email, debug, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReverseApi - interface
 * @export
 * @interface ReverseApi
 */
export interface ReverseApiInterface {
    /**
     * The reverse geocoding API returns exactly one result or an error when the coordinate is in an area with no OSM data coverage. It does not exactly compute the address for the coordinate it receives. It works by finding the closest suitable OSM object and returning its address information. This may occasionally lead to unexpected results. First of all, Nominatim only includes OSM objects in its index that are suitable for searching. Small, unnamed paths for example are missing from the database and can therefore not be used for reverse geocoding either. The other issue to be aware of is that the closest OSM object may not always have a similar enough address to the coordinate you were requesting. For example, in dense city areas it may belong to a completely different street.
     * @summary Generate an address from a coordinate given as latitude and longitude
     * @param {number} [lat] Latitude of a coordinate in WGS84 projection.
     * @param {number} [lon] Longitude of a coordinate in WGS84 projection.
     * @param {ReverseFormatEnum} [format] Format of response. See [Place Output Formats](https://nominatim.org/release-docs/develop/api/Output/) for details on each format. If not specified, it is equal to &#x60;xml&#x60;.
     * @param {string} [jsonCallback] Wrap JSON output in a callback function (JSONP) i.e. &lt;string&gt;(&lt;json&gt;). Only has an effect for JSON output formats.
     * @param {number} [addressdetails] Include a breakdown of the address into elements. If not specified, it is equal to &#x60;1&#x60;.
     * @param {number} [extratags] Include additional information in the result if available, e.g. wikipedia link, opening hours. If not specified, it is equal to &#x60;0&#x60;.
     * @param {number} [namedetails] Include a full list of names for the result. These may include language variants, older names, references and brand. If not specified, it is equal to &#x60;0&#x60;.
     * @param {string} [acceptLanguage] Preferred language order for showing search results. This may either be a simple comma-separated list of language codes or have the same format as the [Accept-Language HTTP header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language). If not specified, it is equal to the content of Accept-Language HTTP header (browsers send the currently chosen browser language, command-line tools usually don\&#39;t send any Accept-Language header).
     * @param {number} [zoom] Level of detail required for the address. This is a number that corresponds roughly to the zoom level used in XYZ tile sources in frameworks like Leaflet.js, Openlayers etc. In terms of address details the zoom levels are as follows: 3) country, 5) state, 8) county, 10) city, 12) town / borough, 13) village / suburb, 14) neighbourhood, 15) any settlement, 16) major streets, 17) major and minor streets, 18) building.
     * @param {string} [layer] The layer filter allows to select places by themes, a comma-separated list of &#x60;address&#x60; (all places that make up an address: address points with house numbers, streets, inhabited places like suburbs, villages, cities, states, and administrative boundaries), &#x60;poi&#x60; (all points of interest like restaurants, shops, hotels but also less obvious features like recycling bins, guideposts or benches), &#x60;railway&#x60; (infrastructures like tracks), &#x60;natural&#x60; (feautures like rivers, lakes and mountains), &#x60;manmade&#x60; (catch-all for features not covered by the other layers).
     * @param {number} [polygonGeojson] Output geometry of results as a GeoJSON.
     * @param {number} [polygonKml] Output geometry of results as a KML.
     * @param {number} [polygonSvg] Output geometry of results as a SVG.
     * @param {number} [polygonText] Output geometry of results as a WKT.
     * @param {number} [polygonThreshold] When one of the polygon_* outputs is chosen, return a simplified version of the output geometry. The parameter is the tolerance in degrees with which the geometry may differ from the original geometry. Topology is preserved in the result.
     * @param {string} [email] If you are making large numbers of request please include an appropriate email address to identify your requests. See Nominatim\&#39;s [Usage Policy](https://operations.osmfoundation.org/policies/nominatim/) for more details.
     * @param {number} [debug] Output assorted developer debug information. Data on internals of Nominatim\&#39;s Search Loop logic, and SQL queries. The output is (rough) HTML format. This overrides the specified machine readable format.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReverseApiInterface
     */
    reverse(lat?: number, lon?: number, format?: ReverseFormatEnum, jsonCallback?: string, addressdetails?: number, extratags?: number, namedetails?: number, acceptLanguage?: string, zoom?: number, layer?: string, polygonGeojson?: number, polygonKml?: number, polygonSvg?: number, polygonText?: number, polygonThreshold?: number, email?: string, debug?: number, options?: RawAxiosRequestConfig): AxiosPromise<OSMGeocodeJson>;

}

/**
 * ReverseApi - object-oriented interface
 * @export
 * @class ReverseApi
 * @extends {BaseAPI}
 */
export class ReverseApi extends BaseAPI implements ReverseApiInterface {
    /**
     * The reverse geocoding API returns exactly one result or an error when the coordinate is in an area with no OSM data coverage. It does not exactly compute the address for the coordinate it receives. It works by finding the closest suitable OSM object and returning its address information. This may occasionally lead to unexpected results. First of all, Nominatim only includes OSM objects in its index that are suitable for searching. Small, unnamed paths for example are missing from the database and can therefore not be used for reverse geocoding either. The other issue to be aware of is that the closest OSM object may not always have a similar enough address to the coordinate you were requesting. For example, in dense city areas it may belong to a completely different street.
     * @summary Generate an address from a coordinate given as latitude and longitude
     * @param {number} [lat] Latitude of a coordinate in WGS84 projection.
     * @param {number} [lon] Longitude of a coordinate in WGS84 projection.
     * @param {ReverseFormatEnum} [format] Format of response. See [Place Output Formats](https://nominatim.org/release-docs/develop/api/Output/) for details on each format. If not specified, it is equal to &#x60;xml&#x60;.
     * @param {string} [jsonCallback] Wrap JSON output in a callback function (JSONP) i.e. &lt;string&gt;(&lt;json&gt;). Only has an effect for JSON output formats.
     * @param {number} [addressdetails] Include a breakdown of the address into elements. If not specified, it is equal to &#x60;1&#x60;.
     * @param {number} [extratags] Include additional information in the result if available, e.g. wikipedia link, opening hours. If not specified, it is equal to &#x60;0&#x60;.
     * @param {number} [namedetails] Include a full list of names for the result. These may include language variants, older names, references and brand. If not specified, it is equal to &#x60;0&#x60;.
     * @param {string} [acceptLanguage] Preferred language order for showing search results. This may either be a simple comma-separated list of language codes or have the same format as the [Accept-Language HTTP header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language). If not specified, it is equal to the content of Accept-Language HTTP header (browsers send the currently chosen browser language, command-line tools usually don\&#39;t send any Accept-Language header).
     * @param {number} [zoom] Level of detail required for the address. This is a number that corresponds roughly to the zoom level used in XYZ tile sources in frameworks like Leaflet.js, Openlayers etc. In terms of address details the zoom levels are as follows: 3) country, 5) state, 8) county, 10) city, 12) town / borough, 13) village / suburb, 14) neighbourhood, 15) any settlement, 16) major streets, 17) major and minor streets, 18) building.
     * @param {string} [layer] The layer filter allows to select places by themes, a comma-separated list of &#x60;address&#x60; (all places that make up an address: address points with house numbers, streets, inhabited places like suburbs, villages, cities, states, and administrative boundaries), &#x60;poi&#x60; (all points of interest like restaurants, shops, hotels but also less obvious features like recycling bins, guideposts or benches), &#x60;railway&#x60; (infrastructures like tracks), &#x60;natural&#x60; (feautures like rivers, lakes and mountains), &#x60;manmade&#x60; (catch-all for features not covered by the other layers).
     * @param {number} [polygonGeojson] Output geometry of results as a GeoJSON.
     * @param {number} [polygonKml] Output geometry of results as a KML.
     * @param {number} [polygonSvg] Output geometry of results as a SVG.
     * @param {number} [polygonText] Output geometry of results as a WKT.
     * @param {number} [polygonThreshold] When one of the polygon_* outputs is chosen, return a simplified version of the output geometry. The parameter is the tolerance in degrees with which the geometry may differ from the original geometry. Topology is preserved in the result.
     * @param {string} [email] If you are making large numbers of request please include an appropriate email address to identify your requests. See Nominatim\&#39;s [Usage Policy](https://operations.osmfoundation.org/policies/nominatim/) for more details.
     * @param {number} [debug] Output assorted developer debug information. Data on internals of Nominatim\&#39;s Search Loop logic, and SQL queries. The output is (rough) HTML format. This overrides the specified machine readable format.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReverseApi
     */
    public reverse(lat?: number, lon?: number, format?: ReverseFormatEnum, jsonCallback?: string, addressdetails?: number, extratags?: number, namedetails?: number, acceptLanguage?: string, zoom?: number, layer?: string, polygonGeojson?: number, polygonKml?: number, polygonSvg?: number, polygonText?: number, polygonThreshold?: number, email?: string, debug?: number, options?: RawAxiosRequestConfig) {
        return ReverseApiFp(this.configuration).reverse(lat, lon, format, jsonCallback, addressdetails, extratags, namedetails, acceptLanguage, zoom, layer, polygonGeojson, polygonKml, polygonSvg, polygonText, polygonThreshold, email, debug, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ReverseFormatEnum = {
    Xml: 'xml',
    Json: 'json',
    Jsonv2: 'jsonv2',
    Geojson: 'geojson',
    Geocodejson: 'geocodejson'
} as const;
export type ReverseFormatEnum = typeof ReverseFormatEnum[keyof typeof ReverseFormatEnum];


/**
 * SearchApi - axios parameter creator
 * @export
 */
export const SearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The search API allows you to look up a location from a textual description or address. Nominatim supports structured and free-form search queries. The search query may also contain special phrases which are translated into specific OpenStreetMap (OSM) tags. This can be used to narrow down the kind of objects to be returned.
         * @summary Look up a location from a textual description or address
         * @param {string} [q] Free-form query string to search for. Free-form queries are processed first left-to-right and then right-to-left if that fails. Commas are optional, but improve performance by reducing the complexity of the search. The free-form may also contain special phrases to describe the type of place to be returned or a coordinate to search close to a position.
         * @param {string} [amenity] Name and/or type of POI. Do not combine with &#x60;q&#x3D;&lt;query&gt;&#x60; parameter.
         * @param {string} [street] Name of street with optional housenumber. Do not combine with &#x60;q&#x3D;&lt;query&gt;&#x60; parameter.
         * @param {string} [city] Name of city. Do not combine with &#x60;q&#x3D;&lt;query&gt;&#x60; parameter.
         * @param {string} [county] Name of county. Do not combine with &#x60;q&#x3D;&lt;query&gt;&#x60; parameter.
         * @param {string} [state] Name of state. Do not combine with &#x60;q&#x3D;&lt;query&gt;&#x60; parameter.
         * @param {string} [country] Name of country. Do not combine with &#x60;q&#x3D;&lt;query&gt;&#x60; parameter.
         * @param {string} [postalcode] Postal code. Do not combine with &#x60;q&#x3D;&lt;query&gt;&#x60; parameter.
         * @param {SearchFormatEnum} [format] Format of response. See [Place Output Formats](https://nominatim.org/release-docs/develop/api/Output/) for details on each format. If not specified, it is equal to &#x60;jsonv2&#x60;.
         * @param {string} [jsonCallback] Wrap JSON output in a callback function (JSONP) i.e. &lt;string&gt;(&lt;json&gt;). Only has an effect for JSON output formats.
         * @param {number} [limit] Limit the maximum number of returned results. Nominatim may decide to return less results than given, if additional results do not sufficiently match the query. If not specified, it is equal to &#x60;10&#x60;.
         * @param {number} [addressdetails] Include a breakdown of the address into elements. If not specified, it is equal to &#x60;0&#x60;.
         * @param {number} [extratags] Include additional information in the result if available, e.g. wikipedia link, opening hours. If not specified, it is equal to &#x60;0&#x60;.
         * @param {number} [namedetails] Include a full list of names for the result. These may include language variants, older names, references and brand. If not specified, it is equal to &#x60;0&#x60;.
         * @param {string} [acceptLanguage] Preferred language order for showing search results. This may either be a simple comma-separated list of language codes or have the same format as the [Accept-Language HTTP header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language). If not specified, it is equal to the content of Accept-Language HTTP header (browsers send the currently chosen browser language, command-line tools usually don\&#39;t send any Accept-Language header).
         * @param {string} [countrycodes] Limit search results to one or more countries. The country code must be the [ISO 3166-1alpha2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code of the country, e.g. gb for the United Kingdom, de for Germany. Each place in Nominatim is assigned to one country code based on OSM country boundaries. In rare cases a place may not be in any country at all, for example, when it is in international waters. These places are also excluded when the filter is set.
         * @param {string} [layer] The layer filter allows to select places by themes, a comma-separated list of &#x60;address&#x60; (all places that make up an address: address points with house numbers, streets, inhabited places like suburbs, villages, cities, states, and administrative boundaries), &#x60;poi&#x60; (all points of interest like restaurants, shops, hotels but also less obvious features like recycling bins, guideposts or benches), &#x60;railway&#x60; (infrastructures like tracks), &#x60;natural&#x60; (feautures like rivers, lakes and mountains), &#x60;manmade&#x60; (catch-all for features not covered by the other layers).
         * @param {SearchFeatureTypeEnum} [featureType] The featureType allows to have a more fine-grained selection for places from the address layer. Results can be restricted to places that make up the \&#39;state\&#39;, \&#39;country\&#39; or \&#39;city\&#39; part of an address. A featureType of settlement selects any human inhabited feature from \&#39;state\&#39; down to \&#39;neighbourhood\&#39;. If not specified, results are automatically restricted to the address layer.
         * @param {string} [excludePlaceIds] If you do not want certain OSM objects to appear in the search result, give a comma separated list of the &#x60;place_ids&#x60; you want to skip. This can be used to retrieve additional search results. For example, if a previous query only returned a few results, then including those here would cause the search to return other, less accurate, matches (if possible).
         * @param {string} [viewbox] The preferred area to find search results. Any two corner points of the box are accepted as long as they span a real box. In &#x60;viewbox&#x3D;&lt;x1&gt;,&lt;y1&gt;,&lt;x2&gt;,&lt;y2&gt;&#x60; x is longitude, y is latitude.
         * @param {number} [bounded] When a viewbox is given, restrict the result to items contained within that viewbox (see above). When &#x60;viewbox&#x60; and &#x60;bounded&#x3D;1&#x60; are given, an amenity only search is allowed. Give the special keyword for the amenity in square brackets, e.g. &#x60;[pub]&#x60; and a selection of objects of this type is returned. There is no guarantee that the result is complete.
         * @param {number} [polygonGeojson] Output geometry of results as a GeoJSON.
         * @param {number} [polygonKml] Output geometry of results as a KML.
         * @param {number} [polygonSvg] Output geometry of results as a SVG.
         * @param {number} [polygonText] Output geometry of results as a WKT.
         * @param {number} [polygonThreshold] When one of the polygon_* outputs is chosen, return a simplified version of the output geometry. The parameter is the tolerance in degrees with which the geometry may differ from the original geometry. Topology is preserved in the result.
         * @param {string} [email] If you are making large numbers of request please include an appropriate email address to identify your requests. See Nominatim\&#39;s [Usage Policy](https://operations.osmfoundation.org/policies/nominatim/) for more details.
         * @param {number} [dedupe] Sometimes you have several objects in OSM identifying the same place or object in reality. The simplest case is a street being split into many different OSM ways due to different characteristics. Nominatim will attempt to detect such duplicates and only return one match unless this parameter is set to 0. If not specified, it is equal to &#x60;0&#x60;.
         * @param {number} [debug] Output assorted developer debug information. Data on internals of Nominatim\&#39;s Search Loop logic, and SQL queries. The output is (rough) HTML format. This overrides the specified machine readable format. If not specified, it is equal to &#x60;0&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search: async (q?: string, amenity?: string, street?: string, city?: string, county?: string, state?: string, country?: string, postalcode?: string, format?: SearchFormatEnum, jsonCallback?: string, limit?: number, addressdetails?: number, extratags?: number, namedetails?: number, acceptLanguage?: string, countrycodes?: string, layer?: string, featureType?: SearchFeatureTypeEnum, excludePlaceIds?: string, viewbox?: string, bounded?: number, polygonGeojson?: number, polygonKml?: number, polygonSvg?: number, polygonText?: number, polygonThreshold?: number, email?: string, dedupe?: number, debug?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (amenity !== undefined) {
                localVarQueryParameter['amenity'] = amenity;
            }

            if (street !== undefined) {
                localVarQueryParameter['street'] = street;
            }

            if (city !== undefined) {
                localVarQueryParameter['city'] = city;
            }

            if (county !== undefined) {
                localVarQueryParameter['county'] = county;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (postalcode !== undefined) {
                localVarQueryParameter['postalcode'] = postalcode;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (jsonCallback !== undefined) {
                localVarQueryParameter['json_callback'] = jsonCallback;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (addressdetails !== undefined) {
                localVarQueryParameter['addressdetails'] = addressdetails;
            }

            if (extratags !== undefined) {
                localVarQueryParameter['extratags'] = extratags;
            }

            if (namedetails !== undefined) {
                localVarQueryParameter['namedetails'] = namedetails;
            }

            if (acceptLanguage !== undefined) {
                localVarQueryParameter['accept-language'] = acceptLanguage;
            }

            if (countrycodes !== undefined) {
                localVarQueryParameter['countrycodes'] = countrycodes;
            }

            if (layer !== undefined) {
                localVarQueryParameter['layer'] = layer;
            }

            if (featureType !== undefined) {
                localVarQueryParameter['featureType'] = featureType;
            }

            if (excludePlaceIds !== undefined) {
                localVarQueryParameter['exclude_place_ids'] = excludePlaceIds;
            }

            if (viewbox !== undefined) {
                localVarQueryParameter['viewbox'] = viewbox;
            }

            if (bounded !== undefined) {
                localVarQueryParameter['bounded'] = bounded;
            }

            if (polygonGeojson !== undefined) {
                localVarQueryParameter['polygon_geojson'] = polygonGeojson;
            }

            if (polygonKml !== undefined) {
                localVarQueryParameter['polygon_kml'] = polygonKml;
            }

            if (polygonSvg !== undefined) {
                localVarQueryParameter['polygon_svg'] = polygonSvg;
            }

            if (polygonText !== undefined) {
                localVarQueryParameter['polygon_text'] = polygonText;
            }

            if (polygonThreshold !== undefined) {
                localVarQueryParameter['polygon_threshold'] = polygonThreshold;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (dedupe !== undefined) {
                localVarQueryParameter['dedupe'] = dedupe;
            }

            if (debug !== undefined) {
                localVarQueryParameter['debug'] = debug;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchApi - functional programming interface
 * @export
 */
export const SearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SearchApiAxiosParamCreator(configuration)
    return {
        /**
         * The search API allows you to look up a location from a textual description or address. Nominatim supports structured and free-form search queries. The search query may also contain special phrases which are translated into specific OpenStreetMap (OSM) tags. This can be used to narrow down the kind of objects to be returned.
         * @summary Look up a location from a textual description or address
         * @param {string} [q] Free-form query string to search for. Free-form queries are processed first left-to-right and then right-to-left if that fails. Commas are optional, but improve performance by reducing the complexity of the search. The free-form may also contain special phrases to describe the type of place to be returned or a coordinate to search close to a position.
         * @param {string} [amenity] Name and/or type of POI. Do not combine with &#x60;q&#x3D;&lt;query&gt;&#x60; parameter.
         * @param {string} [street] Name of street with optional housenumber. Do not combine with &#x60;q&#x3D;&lt;query&gt;&#x60; parameter.
         * @param {string} [city] Name of city. Do not combine with &#x60;q&#x3D;&lt;query&gt;&#x60; parameter.
         * @param {string} [county] Name of county. Do not combine with &#x60;q&#x3D;&lt;query&gt;&#x60; parameter.
         * @param {string} [state] Name of state. Do not combine with &#x60;q&#x3D;&lt;query&gt;&#x60; parameter.
         * @param {string} [country] Name of country. Do not combine with &#x60;q&#x3D;&lt;query&gt;&#x60; parameter.
         * @param {string} [postalcode] Postal code. Do not combine with &#x60;q&#x3D;&lt;query&gt;&#x60; parameter.
         * @param {SearchFormatEnum} [format] Format of response. See [Place Output Formats](https://nominatim.org/release-docs/develop/api/Output/) for details on each format. If not specified, it is equal to &#x60;jsonv2&#x60;.
         * @param {string} [jsonCallback] Wrap JSON output in a callback function (JSONP) i.e. &lt;string&gt;(&lt;json&gt;). Only has an effect for JSON output formats.
         * @param {number} [limit] Limit the maximum number of returned results. Nominatim may decide to return less results than given, if additional results do not sufficiently match the query. If not specified, it is equal to &#x60;10&#x60;.
         * @param {number} [addressdetails] Include a breakdown of the address into elements. If not specified, it is equal to &#x60;0&#x60;.
         * @param {number} [extratags] Include additional information in the result if available, e.g. wikipedia link, opening hours. If not specified, it is equal to &#x60;0&#x60;.
         * @param {number} [namedetails] Include a full list of names for the result. These may include language variants, older names, references and brand. If not specified, it is equal to &#x60;0&#x60;.
         * @param {string} [acceptLanguage] Preferred language order for showing search results. This may either be a simple comma-separated list of language codes or have the same format as the [Accept-Language HTTP header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language). If not specified, it is equal to the content of Accept-Language HTTP header (browsers send the currently chosen browser language, command-line tools usually don\&#39;t send any Accept-Language header).
         * @param {string} [countrycodes] Limit search results to one or more countries. The country code must be the [ISO 3166-1alpha2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code of the country, e.g. gb for the United Kingdom, de for Germany. Each place in Nominatim is assigned to one country code based on OSM country boundaries. In rare cases a place may not be in any country at all, for example, when it is in international waters. These places are also excluded when the filter is set.
         * @param {string} [layer] The layer filter allows to select places by themes, a comma-separated list of &#x60;address&#x60; (all places that make up an address: address points with house numbers, streets, inhabited places like suburbs, villages, cities, states, and administrative boundaries), &#x60;poi&#x60; (all points of interest like restaurants, shops, hotels but also less obvious features like recycling bins, guideposts or benches), &#x60;railway&#x60; (infrastructures like tracks), &#x60;natural&#x60; (feautures like rivers, lakes and mountains), &#x60;manmade&#x60; (catch-all for features not covered by the other layers).
         * @param {SearchFeatureTypeEnum} [featureType] The featureType allows to have a more fine-grained selection for places from the address layer. Results can be restricted to places that make up the \&#39;state\&#39;, \&#39;country\&#39; or \&#39;city\&#39; part of an address. A featureType of settlement selects any human inhabited feature from \&#39;state\&#39; down to \&#39;neighbourhood\&#39;. If not specified, results are automatically restricted to the address layer.
         * @param {string} [excludePlaceIds] If you do not want certain OSM objects to appear in the search result, give a comma separated list of the &#x60;place_ids&#x60; you want to skip. This can be used to retrieve additional search results. For example, if a previous query only returned a few results, then including those here would cause the search to return other, less accurate, matches (if possible).
         * @param {string} [viewbox] The preferred area to find search results. Any two corner points of the box are accepted as long as they span a real box. In &#x60;viewbox&#x3D;&lt;x1&gt;,&lt;y1&gt;,&lt;x2&gt;,&lt;y2&gt;&#x60; x is longitude, y is latitude.
         * @param {number} [bounded] When a viewbox is given, restrict the result to items contained within that viewbox (see above). When &#x60;viewbox&#x60; and &#x60;bounded&#x3D;1&#x60; are given, an amenity only search is allowed. Give the special keyword for the amenity in square brackets, e.g. &#x60;[pub]&#x60; and a selection of objects of this type is returned. There is no guarantee that the result is complete.
         * @param {number} [polygonGeojson] Output geometry of results as a GeoJSON.
         * @param {number} [polygonKml] Output geometry of results as a KML.
         * @param {number} [polygonSvg] Output geometry of results as a SVG.
         * @param {number} [polygonText] Output geometry of results as a WKT.
         * @param {number} [polygonThreshold] When one of the polygon_* outputs is chosen, return a simplified version of the output geometry. The parameter is the tolerance in degrees with which the geometry may differ from the original geometry. Topology is preserved in the result.
         * @param {string} [email] If you are making large numbers of request please include an appropriate email address to identify your requests. See Nominatim\&#39;s [Usage Policy](https://operations.osmfoundation.org/policies/nominatim/) for more details.
         * @param {number} [dedupe] Sometimes you have several objects in OSM identifying the same place or object in reality. The simplest case is a street being split into many different OSM ways due to different characteristics. Nominatim will attempt to detect such duplicates and only return one match unless this parameter is set to 0. If not specified, it is equal to &#x60;0&#x60;.
         * @param {number} [debug] Output assorted developer debug information. Data on internals of Nominatim\&#39;s Search Loop logic, and SQL queries. The output is (rough) HTML format. This overrides the specified machine readable format. If not specified, it is equal to &#x60;0&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async search(q?: string, amenity?: string, street?: string, city?: string, county?: string, state?: string, country?: string, postalcode?: string, format?: SearchFormatEnum, jsonCallback?: string, limit?: number, addressdetails?: number, extratags?: number, namedetails?: number, acceptLanguage?: string, countrycodes?: string, layer?: string, featureType?: SearchFeatureTypeEnum, excludePlaceIds?: string, viewbox?: string, bounded?: number, polygonGeojson?: number, polygonKml?: number, polygonSvg?: number, polygonText?: number, polygonThreshold?: number, email?: string, dedupe?: number, debug?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OSMGeocodeJson>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.search(q, amenity, street, city, county, state, country, postalcode, format, jsonCallback, limit, addressdetails, extratags, namedetails, acceptLanguage, countrycodes, layer, featureType, excludePlaceIds, viewbox, bounded, polygonGeojson, polygonKml, polygonSvg, polygonText, polygonThreshold, email, dedupe, debug, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SearchApi.search']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * SearchApi - factory interface
 * @export
 */
export const SearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SearchApiFp(configuration)
    return {
        /**
         * The search API allows you to look up a location from a textual description or address. Nominatim supports structured and free-form search queries. The search query may also contain special phrases which are translated into specific OpenStreetMap (OSM) tags. This can be used to narrow down the kind of objects to be returned.
         * @summary Look up a location from a textual description or address
         * @param {string} [q] Free-form query string to search for. Free-form queries are processed first left-to-right and then right-to-left if that fails. Commas are optional, but improve performance by reducing the complexity of the search. The free-form may also contain special phrases to describe the type of place to be returned or a coordinate to search close to a position.
         * @param {string} [amenity] Name and/or type of POI. Do not combine with &#x60;q&#x3D;&lt;query&gt;&#x60; parameter.
         * @param {string} [street] Name of street with optional housenumber. Do not combine with &#x60;q&#x3D;&lt;query&gt;&#x60; parameter.
         * @param {string} [city] Name of city. Do not combine with &#x60;q&#x3D;&lt;query&gt;&#x60; parameter.
         * @param {string} [county] Name of county. Do not combine with &#x60;q&#x3D;&lt;query&gt;&#x60; parameter.
         * @param {string} [state] Name of state. Do not combine with &#x60;q&#x3D;&lt;query&gt;&#x60; parameter.
         * @param {string} [country] Name of country. Do not combine with &#x60;q&#x3D;&lt;query&gt;&#x60; parameter.
         * @param {string} [postalcode] Postal code. Do not combine with &#x60;q&#x3D;&lt;query&gt;&#x60; parameter.
         * @param {SearchFormatEnum} [format] Format of response. See [Place Output Formats](https://nominatim.org/release-docs/develop/api/Output/) for details on each format. If not specified, it is equal to &#x60;jsonv2&#x60;.
         * @param {string} [jsonCallback] Wrap JSON output in a callback function (JSONP) i.e. &lt;string&gt;(&lt;json&gt;). Only has an effect for JSON output formats.
         * @param {number} [limit] Limit the maximum number of returned results. Nominatim may decide to return less results than given, if additional results do not sufficiently match the query. If not specified, it is equal to &#x60;10&#x60;.
         * @param {number} [addressdetails] Include a breakdown of the address into elements. If not specified, it is equal to &#x60;0&#x60;.
         * @param {number} [extratags] Include additional information in the result if available, e.g. wikipedia link, opening hours. If not specified, it is equal to &#x60;0&#x60;.
         * @param {number} [namedetails] Include a full list of names for the result. These may include language variants, older names, references and brand. If not specified, it is equal to &#x60;0&#x60;.
         * @param {string} [acceptLanguage] Preferred language order for showing search results. This may either be a simple comma-separated list of language codes or have the same format as the [Accept-Language HTTP header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language). If not specified, it is equal to the content of Accept-Language HTTP header (browsers send the currently chosen browser language, command-line tools usually don\&#39;t send any Accept-Language header).
         * @param {string} [countrycodes] Limit search results to one or more countries. The country code must be the [ISO 3166-1alpha2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code of the country, e.g. gb for the United Kingdom, de for Germany. Each place in Nominatim is assigned to one country code based on OSM country boundaries. In rare cases a place may not be in any country at all, for example, when it is in international waters. These places are also excluded when the filter is set.
         * @param {string} [layer] The layer filter allows to select places by themes, a comma-separated list of &#x60;address&#x60; (all places that make up an address: address points with house numbers, streets, inhabited places like suburbs, villages, cities, states, and administrative boundaries), &#x60;poi&#x60; (all points of interest like restaurants, shops, hotels but also less obvious features like recycling bins, guideposts or benches), &#x60;railway&#x60; (infrastructures like tracks), &#x60;natural&#x60; (feautures like rivers, lakes and mountains), &#x60;manmade&#x60; (catch-all for features not covered by the other layers).
         * @param {SearchFeatureTypeEnum} [featureType] The featureType allows to have a more fine-grained selection for places from the address layer. Results can be restricted to places that make up the \&#39;state\&#39;, \&#39;country\&#39; or \&#39;city\&#39; part of an address. A featureType of settlement selects any human inhabited feature from \&#39;state\&#39; down to \&#39;neighbourhood\&#39;. If not specified, results are automatically restricted to the address layer.
         * @param {string} [excludePlaceIds] If you do not want certain OSM objects to appear in the search result, give a comma separated list of the &#x60;place_ids&#x60; you want to skip. This can be used to retrieve additional search results. For example, if a previous query only returned a few results, then including those here would cause the search to return other, less accurate, matches (if possible).
         * @param {string} [viewbox] The preferred area to find search results. Any two corner points of the box are accepted as long as they span a real box. In &#x60;viewbox&#x3D;&lt;x1&gt;,&lt;y1&gt;,&lt;x2&gt;,&lt;y2&gt;&#x60; x is longitude, y is latitude.
         * @param {number} [bounded] When a viewbox is given, restrict the result to items contained within that viewbox (see above). When &#x60;viewbox&#x60; and &#x60;bounded&#x3D;1&#x60; are given, an amenity only search is allowed. Give the special keyword for the amenity in square brackets, e.g. &#x60;[pub]&#x60; and a selection of objects of this type is returned. There is no guarantee that the result is complete.
         * @param {number} [polygonGeojson] Output geometry of results as a GeoJSON.
         * @param {number} [polygonKml] Output geometry of results as a KML.
         * @param {number} [polygonSvg] Output geometry of results as a SVG.
         * @param {number} [polygonText] Output geometry of results as a WKT.
         * @param {number} [polygonThreshold] When one of the polygon_* outputs is chosen, return a simplified version of the output geometry. The parameter is the tolerance in degrees with which the geometry may differ from the original geometry. Topology is preserved in the result.
         * @param {string} [email] If you are making large numbers of request please include an appropriate email address to identify your requests. See Nominatim\&#39;s [Usage Policy](https://operations.osmfoundation.org/policies/nominatim/) for more details.
         * @param {number} [dedupe] Sometimes you have several objects in OSM identifying the same place or object in reality. The simplest case is a street being split into many different OSM ways due to different characteristics. Nominatim will attempt to detect such duplicates and only return one match unless this parameter is set to 0. If not specified, it is equal to &#x60;0&#x60;.
         * @param {number} [debug] Output assorted developer debug information. Data on internals of Nominatim\&#39;s Search Loop logic, and SQL queries. The output is (rough) HTML format. This overrides the specified machine readable format. If not specified, it is equal to &#x60;0&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search(q?: string, amenity?: string, street?: string, city?: string, county?: string, state?: string, country?: string, postalcode?: string, format?: SearchFormatEnum, jsonCallback?: string, limit?: number, addressdetails?: number, extratags?: number, namedetails?: number, acceptLanguage?: string, countrycodes?: string, layer?: string, featureType?: SearchFeatureTypeEnum, excludePlaceIds?: string, viewbox?: string, bounded?: number, polygonGeojson?: number, polygonKml?: number, polygonSvg?: number, polygonText?: number, polygonThreshold?: number, email?: string, dedupe?: number, debug?: number, options?: any): AxiosPromise<OSMGeocodeJson> {
            return localVarFp.search(q, amenity, street, city, county, state, country, postalcode, format, jsonCallback, limit, addressdetails, extratags, namedetails, acceptLanguage, countrycodes, layer, featureType, excludePlaceIds, viewbox, bounded, polygonGeojson, polygonKml, polygonSvg, polygonText, polygonThreshold, email, dedupe, debug, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SearchApi - interface
 * @export
 * @interface SearchApi
 */
export interface SearchApiInterface {
    /**
     * The search API allows you to look up a location from a textual description or address. Nominatim supports structured and free-form search queries. The search query may also contain special phrases which are translated into specific OpenStreetMap (OSM) tags. This can be used to narrow down the kind of objects to be returned.
     * @summary Look up a location from a textual description or address
     * @param {string} [q] Free-form query string to search for. Free-form queries are processed first left-to-right and then right-to-left if that fails. Commas are optional, but improve performance by reducing the complexity of the search. The free-form may also contain special phrases to describe the type of place to be returned or a coordinate to search close to a position.
     * @param {string} [amenity] Name and/or type of POI. Do not combine with &#x60;q&#x3D;&lt;query&gt;&#x60; parameter.
     * @param {string} [street] Name of street with optional housenumber. Do not combine with &#x60;q&#x3D;&lt;query&gt;&#x60; parameter.
     * @param {string} [city] Name of city. Do not combine with &#x60;q&#x3D;&lt;query&gt;&#x60; parameter.
     * @param {string} [county] Name of county. Do not combine with &#x60;q&#x3D;&lt;query&gt;&#x60; parameter.
     * @param {string} [state] Name of state. Do not combine with &#x60;q&#x3D;&lt;query&gt;&#x60; parameter.
     * @param {string} [country] Name of country. Do not combine with &#x60;q&#x3D;&lt;query&gt;&#x60; parameter.
     * @param {string} [postalcode] Postal code. Do not combine with &#x60;q&#x3D;&lt;query&gt;&#x60; parameter.
     * @param {SearchFormatEnum} [format] Format of response. See [Place Output Formats](https://nominatim.org/release-docs/develop/api/Output/) for details on each format. If not specified, it is equal to &#x60;jsonv2&#x60;.
     * @param {string} [jsonCallback] Wrap JSON output in a callback function (JSONP) i.e. &lt;string&gt;(&lt;json&gt;). Only has an effect for JSON output formats.
     * @param {number} [limit] Limit the maximum number of returned results. Nominatim may decide to return less results than given, if additional results do not sufficiently match the query. If not specified, it is equal to &#x60;10&#x60;.
     * @param {number} [addressdetails] Include a breakdown of the address into elements. If not specified, it is equal to &#x60;0&#x60;.
     * @param {number} [extratags] Include additional information in the result if available, e.g. wikipedia link, opening hours. If not specified, it is equal to &#x60;0&#x60;.
     * @param {number} [namedetails] Include a full list of names for the result. These may include language variants, older names, references and brand. If not specified, it is equal to &#x60;0&#x60;.
     * @param {string} [acceptLanguage] Preferred language order for showing search results. This may either be a simple comma-separated list of language codes or have the same format as the [Accept-Language HTTP header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language). If not specified, it is equal to the content of Accept-Language HTTP header (browsers send the currently chosen browser language, command-line tools usually don\&#39;t send any Accept-Language header).
     * @param {string} [countrycodes] Limit search results to one or more countries. The country code must be the [ISO 3166-1alpha2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code of the country, e.g. gb for the United Kingdom, de for Germany. Each place in Nominatim is assigned to one country code based on OSM country boundaries. In rare cases a place may not be in any country at all, for example, when it is in international waters. These places are also excluded when the filter is set.
     * @param {string} [layer] The layer filter allows to select places by themes, a comma-separated list of &#x60;address&#x60; (all places that make up an address: address points with house numbers, streets, inhabited places like suburbs, villages, cities, states, and administrative boundaries), &#x60;poi&#x60; (all points of interest like restaurants, shops, hotels but also less obvious features like recycling bins, guideposts or benches), &#x60;railway&#x60; (infrastructures like tracks), &#x60;natural&#x60; (feautures like rivers, lakes and mountains), &#x60;manmade&#x60; (catch-all for features not covered by the other layers).
     * @param {SearchFeatureTypeEnum} [featureType] The featureType allows to have a more fine-grained selection for places from the address layer. Results can be restricted to places that make up the \&#39;state\&#39;, \&#39;country\&#39; or \&#39;city\&#39; part of an address. A featureType of settlement selects any human inhabited feature from \&#39;state\&#39; down to \&#39;neighbourhood\&#39;. If not specified, results are automatically restricted to the address layer.
     * @param {string} [excludePlaceIds] If you do not want certain OSM objects to appear in the search result, give a comma separated list of the &#x60;place_ids&#x60; you want to skip. This can be used to retrieve additional search results. For example, if a previous query only returned a few results, then including those here would cause the search to return other, less accurate, matches (if possible).
     * @param {string} [viewbox] The preferred area to find search results. Any two corner points of the box are accepted as long as they span a real box. In &#x60;viewbox&#x3D;&lt;x1&gt;,&lt;y1&gt;,&lt;x2&gt;,&lt;y2&gt;&#x60; x is longitude, y is latitude.
     * @param {number} [bounded] When a viewbox is given, restrict the result to items contained within that viewbox (see above). When &#x60;viewbox&#x60; and &#x60;bounded&#x3D;1&#x60; are given, an amenity only search is allowed. Give the special keyword for the amenity in square brackets, e.g. &#x60;[pub]&#x60; and a selection of objects of this type is returned. There is no guarantee that the result is complete.
     * @param {number} [polygonGeojson] Output geometry of results as a GeoJSON.
     * @param {number} [polygonKml] Output geometry of results as a KML.
     * @param {number} [polygonSvg] Output geometry of results as a SVG.
     * @param {number} [polygonText] Output geometry of results as a WKT.
     * @param {number} [polygonThreshold] When one of the polygon_* outputs is chosen, return a simplified version of the output geometry. The parameter is the tolerance in degrees with which the geometry may differ from the original geometry. Topology is preserved in the result.
     * @param {string} [email] If you are making large numbers of request please include an appropriate email address to identify your requests. See Nominatim\&#39;s [Usage Policy](https://operations.osmfoundation.org/policies/nominatim/) for more details.
     * @param {number} [dedupe] Sometimes you have several objects in OSM identifying the same place or object in reality. The simplest case is a street being split into many different OSM ways due to different characteristics. Nominatim will attempt to detect such duplicates and only return one match unless this parameter is set to 0. If not specified, it is equal to &#x60;0&#x60;.
     * @param {number} [debug] Output assorted developer debug information. Data on internals of Nominatim\&#39;s Search Loop logic, and SQL queries. The output is (rough) HTML format. This overrides the specified machine readable format. If not specified, it is equal to &#x60;0&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    search(q?: string, amenity?: string, street?: string, city?: string, county?: string, state?: string, country?: string, postalcode?: string, format?: SearchFormatEnum, jsonCallback?: string, limit?: number, addressdetails?: number, extratags?: number, namedetails?: number, acceptLanguage?: string, countrycodes?: string, layer?: string, featureType?: SearchFeatureTypeEnum, excludePlaceIds?: string, viewbox?: string, bounded?: number, polygonGeojson?: number, polygonKml?: number, polygonSvg?: number, polygonText?: number, polygonThreshold?: number, email?: string, dedupe?: number, debug?: number, options?: RawAxiosRequestConfig): AxiosPromise<OSMGeocodeJson>;

}

/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
export class SearchApi extends BaseAPI implements SearchApiInterface {
    /**
     * The search API allows you to look up a location from a textual description or address. Nominatim supports structured and free-form search queries. The search query may also contain special phrases which are translated into specific OpenStreetMap (OSM) tags. This can be used to narrow down the kind of objects to be returned.
     * @summary Look up a location from a textual description or address
     * @param {string} [q] Free-form query string to search for. Free-form queries are processed first left-to-right and then right-to-left if that fails. Commas are optional, but improve performance by reducing the complexity of the search. The free-form may also contain special phrases to describe the type of place to be returned or a coordinate to search close to a position.
     * @param {string} [amenity] Name and/or type of POI. Do not combine with &#x60;q&#x3D;&lt;query&gt;&#x60; parameter.
     * @param {string} [street] Name of street with optional housenumber. Do not combine with &#x60;q&#x3D;&lt;query&gt;&#x60; parameter.
     * @param {string} [city] Name of city. Do not combine with &#x60;q&#x3D;&lt;query&gt;&#x60; parameter.
     * @param {string} [county] Name of county. Do not combine with &#x60;q&#x3D;&lt;query&gt;&#x60; parameter.
     * @param {string} [state] Name of state. Do not combine with &#x60;q&#x3D;&lt;query&gt;&#x60; parameter.
     * @param {string} [country] Name of country. Do not combine with &#x60;q&#x3D;&lt;query&gt;&#x60; parameter.
     * @param {string} [postalcode] Postal code. Do not combine with &#x60;q&#x3D;&lt;query&gt;&#x60; parameter.
     * @param {SearchFormatEnum} [format] Format of response. See [Place Output Formats](https://nominatim.org/release-docs/develop/api/Output/) for details on each format. If not specified, it is equal to &#x60;jsonv2&#x60;.
     * @param {string} [jsonCallback] Wrap JSON output in a callback function (JSONP) i.e. &lt;string&gt;(&lt;json&gt;). Only has an effect for JSON output formats.
     * @param {number} [limit] Limit the maximum number of returned results. Nominatim may decide to return less results than given, if additional results do not sufficiently match the query. If not specified, it is equal to &#x60;10&#x60;.
     * @param {number} [addressdetails] Include a breakdown of the address into elements. If not specified, it is equal to &#x60;0&#x60;.
     * @param {number} [extratags] Include additional information in the result if available, e.g. wikipedia link, opening hours. If not specified, it is equal to &#x60;0&#x60;.
     * @param {number} [namedetails] Include a full list of names for the result. These may include language variants, older names, references and brand. If not specified, it is equal to &#x60;0&#x60;.
     * @param {string} [acceptLanguage] Preferred language order for showing search results. This may either be a simple comma-separated list of language codes or have the same format as the [Accept-Language HTTP header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language). If not specified, it is equal to the content of Accept-Language HTTP header (browsers send the currently chosen browser language, command-line tools usually don\&#39;t send any Accept-Language header).
     * @param {string} [countrycodes] Limit search results to one or more countries. The country code must be the [ISO 3166-1alpha2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code of the country, e.g. gb for the United Kingdom, de for Germany. Each place in Nominatim is assigned to one country code based on OSM country boundaries. In rare cases a place may not be in any country at all, for example, when it is in international waters. These places are also excluded when the filter is set.
     * @param {string} [layer] The layer filter allows to select places by themes, a comma-separated list of &#x60;address&#x60; (all places that make up an address: address points with house numbers, streets, inhabited places like suburbs, villages, cities, states, and administrative boundaries), &#x60;poi&#x60; (all points of interest like restaurants, shops, hotels but also less obvious features like recycling bins, guideposts or benches), &#x60;railway&#x60; (infrastructures like tracks), &#x60;natural&#x60; (feautures like rivers, lakes and mountains), &#x60;manmade&#x60; (catch-all for features not covered by the other layers).
     * @param {SearchFeatureTypeEnum} [featureType] The featureType allows to have a more fine-grained selection for places from the address layer. Results can be restricted to places that make up the \&#39;state\&#39;, \&#39;country\&#39; or \&#39;city\&#39; part of an address. A featureType of settlement selects any human inhabited feature from \&#39;state\&#39; down to \&#39;neighbourhood\&#39;. If not specified, results are automatically restricted to the address layer.
     * @param {string} [excludePlaceIds] If you do not want certain OSM objects to appear in the search result, give a comma separated list of the &#x60;place_ids&#x60; you want to skip. This can be used to retrieve additional search results. For example, if a previous query only returned a few results, then including those here would cause the search to return other, less accurate, matches (if possible).
     * @param {string} [viewbox] The preferred area to find search results. Any two corner points of the box are accepted as long as they span a real box. In &#x60;viewbox&#x3D;&lt;x1&gt;,&lt;y1&gt;,&lt;x2&gt;,&lt;y2&gt;&#x60; x is longitude, y is latitude.
     * @param {number} [bounded] When a viewbox is given, restrict the result to items contained within that viewbox (see above). When &#x60;viewbox&#x60; and &#x60;bounded&#x3D;1&#x60; are given, an amenity only search is allowed. Give the special keyword for the amenity in square brackets, e.g. &#x60;[pub]&#x60; and a selection of objects of this type is returned. There is no guarantee that the result is complete.
     * @param {number} [polygonGeojson] Output geometry of results as a GeoJSON.
     * @param {number} [polygonKml] Output geometry of results as a KML.
     * @param {number} [polygonSvg] Output geometry of results as a SVG.
     * @param {number} [polygonText] Output geometry of results as a WKT.
     * @param {number} [polygonThreshold] When one of the polygon_* outputs is chosen, return a simplified version of the output geometry. The parameter is the tolerance in degrees with which the geometry may differ from the original geometry. Topology is preserved in the result.
     * @param {string} [email] If you are making large numbers of request please include an appropriate email address to identify your requests. See Nominatim\&#39;s [Usage Policy](https://operations.osmfoundation.org/policies/nominatim/) for more details.
     * @param {number} [dedupe] Sometimes you have several objects in OSM identifying the same place or object in reality. The simplest case is a street being split into many different OSM ways due to different characteristics. Nominatim will attempt to detect such duplicates and only return one match unless this parameter is set to 0. If not specified, it is equal to &#x60;0&#x60;.
     * @param {number} [debug] Output assorted developer debug information. Data on internals of Nominatim\&#39;s Search Loop logic, and SQL queries. The output is (rough) HTML format. This overrides the specified machine readable format. If not specified, it is equal to &#x60;0&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public search(q?: string, amenity?: string, street?: string, city?: string, county?: string, state?: string, country?: string, postalcode?: string, format?: SearchFormatEnum, jsonCallback?: string, limit?: number, addressdetails?: number, extratags?: number, namedetails?: number, acceptLanguage?: string, countrycodes?: string, layer?: string, featureType?: SearchFeatureTypeEnum, excludePlaceIds?: string, viewbox?: string, bounded?: number, polygonGeojson?: number, polygonKml?: number, polygonSvg?: number, polygonText?: number, polygonThreshold?: number, email?: string, dedupe?: number, debug?: number, options?: RawAxiosRequestConfig) {
        return SearchApiFp(this.configuration).search(q, amenity, street, city, county, state, country, postalcode, format, jsonCallback, limit, addressdetails, extratags, namedetails, acceptLanguage, countrycodes, layer, featureType, excludePlaceIds, viewbox, bounded, polygonGeojson, polygonKml, polygonSvg, polygonText, polygonThreshold, email, dedupe, debug, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const SearchFormatEnum = {
    Xml: 'xml',
    Json: 'json',
    Jsonv2: 'jsonv2',
    Geojson: 'geojson',
    Geocodejson: 'geocodejson'
} as const;
export type SearchFormatEnum = typeof SearchFormatEnum[keyof typeof SearchFormatEnum];
/**
 * @export
 */
export const SearchFeatureTypeEnum = {
    Country: 'country',
    State: 'state',
    City: 'city',
    Settlement: 'settlement'
} as const;
export type SearchFeatureTypeEnum = typeof SearchFeatureTypeEnum[keyof typeof SearchFeatureTypeEnum];


/**
 * StatusApi - axios parameter creator
 * @export
 */
export const StatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Report on the state of the service and database. Useful for checking if the service is up and running. The JSON output also reports when the database was last updated.
         * @summary Report on the state of the service and database
         * @param {StatusFormatEnum} [format] Selects the output format. See [Status Output Formats](https://nominatim.org/release-docs/develop/api/Status/#output) for details on each format. If not specified, it is equal to &#x60;text&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        status: async (format?: StatusFormatEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StatusApi - functional programming interface
 * @export
 */
export const StatusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StatusApiAxiosParamCreator(configuration)
    return {
        /**
         * Report on the state of the service and database. Useful for checking if the service is up and running. The JSON output also reports when the database was last updated.
         * @summary Report on the state of the service and database
         * @param {StatusFormatEnum} [format] Selects the output format. See [Status Output Formats](https://nominatim.org/release-docs/develop/api/Status/#output) for details on each format. If not specified, it is equal to &#x60;text&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async status(format?: StatusFormatEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.status(format, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['StatusApi.status']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * StatusApi - factory interface
 * @export
 */
export const StatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StatusApiFp(configuration)
    return {
        /**
         * Report on the state of the service and database. Useful for checking if the service is up and running. The JSON output also reports when the database was last updated.
         * @summary Report on the state of the service and database
         * @param {StatusFormatEnum} [format] Selects the output format. See [Status Output Formats](https://nominatim.org/release-docs/develop/api/Status/#output) for details on each format. If not specified, it is equal to &#x60;text&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        status(format?: StatusFormatEnum, options?: any): AxiosPromise<StatusResponse> {
            return localVarFp.status(format, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StatusApi - interface
 * @export
 * @interface StatusApi
 */
export interface StatusApiInterface {
    /**
     * Report on the state of the service and database. Useful for checking if the service is up and running. The JSON output also reports when the database was last updated.
     * @summary Report on the state of the service and database
     * @param {StatusFormatEnum} [format] Selects the output format. See [Status Output Formats](https://nominatim.org/release-docs/develop/api/Status/#output) for details on each format. If not specified, it is equal to &#x60;text&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatusApiInterface
     */
    status(format?: StatusFormatEnum, options?: RawAxiosRequestConfig): AxiosPromise<StatusResponse>;

}

/**
 * StatusApi - object-oriented interface
 * @export
 * @class StatusApi
 * @extends {BaseAPI}
 */
export class StatusApi extends BaseAPI implements StatusApiInterface {
    /**
     * Report on the state of the service and database. Useful for checking if the service is up and running. The JSON output also reports when the database was last updated.
     * @summary Report on the state of the service and database
     * @param {StatusFormatEnum} [format] Selects the output format. See [Status Output Formats](https://nominatim.org/release-docs/develop/api/Status/#output) for details on each format. If not specified, it is equal to &#x60;text&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatusApi
     */
    public status(format?: StatusFormatEnum, options?: RawAxiosRequestConfig) {
        return StatusApiFp(this.configuration).status(format, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const StatusFormatEnum = {
    Text: 'text',
    Json: 'json'
} as const;
export type StatusFormatEnum = typeof StatusFormatEnum[keyof typeof StatusFormatEnum];


