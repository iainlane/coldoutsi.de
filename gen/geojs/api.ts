/* tslint:disable */
/* eslint-disable */
/**
 * GeoJS Geo API
 * Provides geographical information about an IP address
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Geolocate200ResponseInner
 */
export interface Geolocate200ResponseInner {
    /**
     * The IP address the geolocation data is for.
     * @type {string}
     * @memberof Geolocate200ResponseInner
     */
    'ip': string;
    /**
     * The full name of the country.
     * @type {string}
     * @memberof Geolocate200ResponseInner
     */
    'country': string;
    /**
     * The two-letter ISO country code.
     * @type {string}
     * @memberof Geolocate200ResponseInner
     */
    'country_code': string;
    /**
     * The three-letter country code.
     * @type {string}
     * @memberof Geolocate200ResponseInner
     */
    'country_code3': string;
    /**
     * The two-letter continent code.
     * @type {string}
     * @memberof Geolocate200ResponseInner
     */
    'continent_code': string;
    /**
     * The city of the IP.
     * @type {string}
     * @memberof Geolocate200ResponseInner
     */
    'city': string;
    /**
     * The region/state of the IP.
     * @type {string}
     * @memberof Geolocate200ResponseInner
     */
    'region': string;
    /**
     * The latitude of the IP.
     * @type {string}
     * @memberof Geolocate200ResponseInner
     */
    'latitude': string;
    /**
     * The longitude of the IP.
     * @type {string}
     * @memberof Geolocate200ResponseInner
     */
    'longitude': string;
    /**
     * The accuracy radius of the IP location in kilometers.
     * @type {number}
     * @memberof Geolocate200ResponseInner
     */
    'accuracy': number;
    /**
     * The timezone of the IP.
     * @type {string}
     * @memberof Geolocate200ResponseInner
     */
    'timezone': string;
    /**
     * The name of the ISP or organization associated with the IP.
     * @type {string}
     * @memberof Geolocate200ResponseInner
     */
    'organization_name': string;
    /**
     * The Autonomous System Number associated with the IP.
     * @type {number}
     * @memberof Geolocate200ResponseInner
     */
    'asn': number;
    /**
     * The organization associated with the IP.
     * @type {string}
     * @memberof Geolocate200ResponseInner
     */
    'organization': string;
}

/**
 * GeoJSApi - axios parameter creator
 * @export
 */
export const GeoJSApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves geolocation data for the provided comma-separated list of IP addresses or the requester\'s IP if no IP is provided.
         * @summary Get geo information for the requester\'s IP or the specified IP(s)
         * @param {string} [ip] A comma-separated list of IP addresses to get geolocation data for. If omitted, the requester\&#39;s IP is used.
         * @param {string} [callback] The name of the JSONP callback function.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        geolocate: async (ip?: string, callback?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/geo.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ip !== undefined) {
                localVarQueryParameter['ip'] = ip;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GeoJSApi - functional programming interface
 * @export
 */
export const GeoJSApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GeoJSApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves geolocation data for the provided comma-separated list of IP addresses or the requester\'s IP if no IP is provided.
         * @summary Get geo information for the requester\'s IP or the specified IP(s)
         * @param {string} [ip] A comma-separated list of IP addresses to get geolocation data for. If omitted, the requester\&#39;s IP is used.
         * @param {string} [callback] The name of the JSONP callback function.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async geolocate(ip?: string, callback?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Geolocate200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.geolocate(ip, callback, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['GeoJSApi.geolocate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * GeoJSApi - factory interface
 * @export
 */
export const GeoJSApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GeoJSApiFp(configuration)
    return {
        /**
         * Retrieves geolocation data for the provided comma-separated list of IP addresses or the requester\'s IP if no IP is provided.
         * @summary Get geo information for the requester\'s IP or the specified IP(s)
         * @param {string} [ip] A comma-separated list of IP addresses to get geolocation data for. If omitted, the requester\&#39;s IP is used.
         * @param {string} [callback] The name of the JSONP callback function.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        geolocate(ip?: string, callback?: string, options?: any): AxiosPromise<Array<Geolocate200ResponseInner>> {
            return localVarFp.geolocate(ip, callback, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GeoJSApi - interface
 * @export
 * @interface GeoJSApi
 */
export interface GeoJSApiInterface {
    /**
     * Retrieves geolocation data for the provided comma-separated list of IP addresses or the requester\'s IP if no IP is provided.
     * @summary Get geo information for the requester\'s IP or the specified IP(s)
     * @param {string} [ip] A comma-separated list of IP addresses to get geolocation data for. If omitted, the requester\&#39;s IP is used.
     * @param {string} [callback] The name of the JSONP callback function.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeoJSApiInterface
     */
    geolocate(ip?: string, callback?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Geolocate200ResponseInner>>;

}

/**
 * GeoJSApi - object-oriented interface
 * @export
 * @class GeoJSApi
 * @extends {BaseAPI}
 */
export class GeoJSApi extends BaseAPI implements GeoJSApiInterface {
    /**
     * Retrieves geolocation data for the provided comma-separated list of IP addresses or the requester\'s IP if no IP is provided.
     * @summary Get geo information for the requester\'s IP or the specified IP(s)
     * @param {string} [ip] A comma-separated list of IP addresses to get geolocation data for. If omitted, the requester\&#39;s IP is used.
     * @param {string} [callback] The name of the JSONP callback function.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeoJSApi
     */
    public geolocate(ip?: string, callback?: string, options?: RawAxiosRequestConfig) {
        return GeoJSApiFp(this.configuration).geolocate(ip, callback, options).then((request) => request(this.axios, this.basePath));
    }
}



